
BNgampatipatpongFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041a8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e0  08004354  08004354  00005354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005534  08005534  00007028  2**0
                  CONTENTS
  4 .ARM          00000008  08005534  08005534  00006534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800553c  0800553c  00007028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800553c  0800553c  0000653c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005540  08005540  00006540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08005544  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007028  2**0
                  CONTENTS
 10 .bss          00025c10  20000028  20000028  00007028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025c38  20025c38  00007028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aac1  00000000  00000000  00007058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024ce  00000000  00000000  00011b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb0  00000000  00000000  00013fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a0  00000000  00000000  00014b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265b7  00000000  00000000  00015438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000edca  00000000  00000000  0003b9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0a42  00000000  00000000  0004a7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b1fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d68  00000000  00000000  0012b240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0012dfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800433c 	.word	0x0800433c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	0800433c 	.word	0x0800433c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	RNG_Init();
 80004e0:	f001 f854 	bl	800158c <RNG_Init>
	initialise_monitor_handles(); // Allows printf functionality
 80004e4:	f001 fe2f 	bl	8002146 <initialise_monitor_handles>
    LTCD__Init();
 80004e8:	f000 fbee 	bl	8000cc8 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 fbab 	bl	8000c48 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004f2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 fce4 	bl	8000ec4 <LCD_Clear>

    addSchedulerEvent(GAME_HOMESCREEN_EVENT);
 80004fc:	2001      	movs	r0, #1
 80004fe:	f001 f883 	bl	8001608 <addSchedulerEvent>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}

08000506 <LCD_Menu_Screen>:
{
	visualDemo();
}

void LCD_Menu_Screen()
{
 8000506:	b580      	push	{r7, lr}
 8000508:	af00      	add	r7, sp, #0
	menuScreen();
 800050a:	f000 ffcd 	bl	80014a8 <menuScreen>
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <Game_Init>:
static uint32_t gameMatrix[numRow][numCol];
static uint32_t movingBlock[4][2];
static uint16_t currentBlock;
static uint16_t colorMatrix[7] = {LCD_COLOR_YELLOW, LCD_COLOR_CYAN, LCD_COLOR_RED, LCD_COLOR_GREEN, LCD_COLOR_ORANGE, LCD_COLOR_MAGENTA, LCD_COLOR_PURPLE};

void Game_Init() {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	playScreen();
 800051a:	f001 f813 	bl	8001544 <playScreen>
	for (int i = 0; i < numRow; i++) {
 800051e:	2300      	movs	r3, #0
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	e016      	b.n	8000552 <Game_Init+0x3e>
		for (int j = 0; j < numCol; j++) {
 8000524:	2300      	movs	r3, #0
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	e00d      	b.n	8000546 <Game_Init+0x32>
			gameMatrix[i][j] = 0;
 800052a:	490e      	ldr	r1, [pc, #56]	@ (8000564 <Game_Init+0x50>)
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	4613      	mov	r3, r2
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	4413      	add	r3, r2
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	683a      	ldr	r2, [r7, #0]
 8000538:	4413      	add	r3, r2
 800053a:	2200      	movs	r2, #0
 800053c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int j = 0; j < numCol; j++) {
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	2b09      	cmp	r3, #9
 800054a:	ddee      	ble.n	800052a <Game_Init+0x16>
	for (int i = 0; i < numRow; i++) {
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3301      	adds	r3, #1
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	dde5      	ble.n	8000524 <Game_Init+0x10>
		}
	}
	// Game_DrawBoard();

}
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000044 	.word	0x20000044

08000568 <Game_NewBlock>:
void Game_NewBlock() {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	uint32_t num = generateNumber7();
 800056e:	f001 f821 	bl	80015b4 <generateNumber7>
 8000572:	6078      	str	r0, [r7, #4]

	Game_PlaceBlock(1,4,num);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	b29b      	uxth	r3, r3
 8000578:	461a      	mov	r2, r3
 800057a:	2104      	movs	r1, #4
 800057c:	2001      	movs	r0, #1
 800057e:	f000 f805 	bl	800058c <Game_PlaceBlock>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <Game_PlaceBlock>:

void Game_PlaceBlock(uint16_t x, uint16_t y, uint16_t block) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]
 8000596:	460b      	mov	r3, r1
 8000598:	80bb      	strh	r3, [r7, #4]
 800059a:	4613      	mov	r3, r2
 800059c:	807b      	strh	r3, [r7, #2]

	Game_PlaceBlockMatrix(x,y,block);
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	88b9      	ldrh	r1, [r7, #4]
 80005a2:	887a      	ldrh	r2, [r7, #2]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f82b 	bl	8000600 <Game_PlaceBlockMatrix>
	currentBlock = block;
 80005aa:	4a12      	ldr	r2, [pc, #72]	@ (80005f4 <Game_PlaceBlock+0x68>)
 80005ac:	887b      	ldrh	r3, [r7, #2]
 80005ae:	8013      	strh	r3, [r2, #0]
	for (int i = 0; i < 4; i++) {
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	e016      	b.n	80005e4 <Game_PlaceBlock+0x58>
		Game_PlaceSquare(movingBlock[i][0],movingBlock[i][1], colorMatrix[currentBlock]);
 80005b6:	4a10      	ldr	r2, [pc, #64]	@ (80005f8 <Game_PlaceBlock+0x6c>)
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80005be:	b298      	uxth	r0, r3
 80005c0:	4a0d      	ldr	r2, [pc, #52]	@ (80005f8 <Game_PlaceBlock+0x6c>)
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	4413      	add	r3, r2
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	4a09      	ldr	r2, [pc, #36]	@ (80005f4 <Game_PlaceBlock+0x68>)
 80005ce:	8812      	ldrh	r2, [r2, #0]
 80005d0:	4611      	mov	r1, r2
 80005d2:	4a0a      	ldr	r2, [pc, #40]	@ (80005fc <Game_PlaceBlock+0x70>)
 80005d4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80005d8:	4619      	mov	r1, r3
 80005da:	f000 f915 	bl	8000808 <Game_PlaceSquare>
	for (int i = 0; i < 4; i++) {
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	dde5      	ble.n	80005b6 <Game_PlaceBlock+0x2a>
//	} else if (block == JBlock) {
//		drawJ(20 + y * 20 + 10, x * 20 + 10);
//	} else if (block == TBlock) {
//		drawT(20 + y * 20 + 10, x * 20 + 10);
//	}
}
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200002e4 	.word	0x200002e4
 80005f8:	200002c4 	.word	0x200002c4
 80005fc:	20000000 	.word	0x20000000

08000600 <Game_PlaceBlockMatrix>:

void Game_PlaceBlockMatrix(uint16_t x, uint16_t y, uint16_t block) {
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
 800060a:	460b      	mov	r3, r1
 800060c:	80bb      	strh	r3, [r7, #4]
 800060e:	4613      	mov	r3, r2
 8000610:	807b      	strh	r3, [r7, #2]
	if (block == OBlock) {
 8000612:	887b      	ldrh	r3, [r7, #2]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d120      	bne.n	800065a <Game_PlaceBlockMatrix+0x5a>
		movingBlock[0][0] = x;
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	4a7a      	ldr	r2, [pc, #488]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 800061c:	6013      	str	r3, [r2, #0]
		movingBlock[0][1] = y;
 800061e:	88bb      	ldrh	r3, [r7, #4]
 8000620:	4a78      	ldr	r2, [pc, #480]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000622:	6053      	str	r3, [r2, #4]
		movingBlock[1][0] = x - 1;
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	3b01      	subs	r3, #1
 8000628:	461a      	mov	r2, r3
 800062a:	4b76      	ldr	r3, [pc, #472]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 800062c:	609a      	str	r2, [r3, #8]
		movingBlock[1][1] = y;
 800062e:	88bb      	ldrh	r3, [r7, #4]
 8000630:	4a74      	ldr	r2, [pc, #464]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000632:	60d3      	str	r3, [r2, #12]
		movingBlock[2][0] = x - 1;
 8000634:	88fb      	ldrh	r3, [r7, #6]
 8000636:	3b01      	subs	r3, #1
 8000638:	461a      	mov	r2, r3
 800063a:	4b72      	ldr	r3, [pc, #456]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 800063c:	611a      	str	r2, [r3, #16]
		movingBlock[2][1] = y + 1;
 800063e:	88bb      	ldrh	r3, [r7, #4]
 8000640:	3301      	adds	r3, #1
 8000642:	461a      	mov	r2, r3
 8000644:	4b6f      	ldr	r3, [pc, #444]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000646:	615a      	str	r2, [r3, #20]
		movingBlock[3][0] = x;
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4a6e      	ldr	r2, [pc, #440]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 800064c:	6193      	str	r3, [r2, #24]
		movingBlock[3][1] = y + 1;
 800064e:	88bb      	ldrh	r3, [r7, #4]
 8000650:	3301      	adds	r3, #1
 8000652:	461a      	mov	r2, r3
 8000654:	4b6b      	ldr	r3, [pc, #428]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000656:	61da      	str	r2, [r3, #28]
		movingBlock[1][1] = y - 1;
		movingBlock[2][0] = x;
		movingBlock[2][1] = y + 1;
		movingBlock[3][0] = x - 1;
		movingBlock[3][1] = y;			}
}
 8000658:	e0ce      	b.n	80007f8 <Game_PlaceBlockMatrix+0x1f8>
	} else if (block == IBlock) {
 800065a:	887b      	ldrh	r3, [r7, #2]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d11e      	bne.n	800069e <Game_PlaceBlockMatrix+0x9e>
		movingBlock[0][0] = x;
 8000660:	88fb      	ldrh	r3, [r7, #6]
 8000662:	4a68      	ldr	r2, [pc, #416]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000664:	6013      	str	r3, [r2, #0]
		movingBlock[0][1] = y;
 8000666:	88bb      	ldrh	r3, [r7, #4]
 8000668:	4a66      	ldr	r2, [pc, #408]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 800066a:	6053      	str	r3, [r2, #4]
		movingBlock[1][0] = x;
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	4a65      	ldr	r2, [pc, #404]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000670:	6093      	str	r3, [r2, #8]
		movingBlock[1][1] = y - 1;
 8000672:	88bb      	ldrh	r3, [r7, #4]
 8000674:	3b01      	subs	r3, #1
 8000676:	461a      	mov	r2, r3
 8000678:	4b62      	ldr	r3, [pc, #392]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 800067a:	60da      	str	r2, [r3, #12]
		movingBlock[2][0] = x;
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4a61      	ldr	r2, [pc, #388]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000680:	6113      	str	r3, [r2, #16]
		movingBlock[2][1] = y + 1;
 8000682:	88bb      	ldrh	r3, [r7, #4]
 8000684:	3301      	adds	r3, #1
 8000686:	461a      	mov	r2, r3
 8000688:	4b5e      	ldr	r3, [pc, #376]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 800068a:	615a      	str	r2, [r3, #20]
		movingBlock[3][0] = x;
 800068c:	88fb      	ldrh	r3, [r7, #6]
 800068e:	4a5d      	ldr	r2, [pc, #372]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000690:	6193      	str	r3, [r2, #24]
		movingBlock[3][1] = y + 2;
 8000692:	88bb      	ldrh	r3, [r7, #4]
 8000694:	3302      	adds	r3, #2
 8000696:	461a      	mov	r2, r3
 8000698:	4b5a      	ldr	r3, [pc, #360]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 800069a:	61da      	str	r2, [r3, #28]
}
 800069c:	e0ac      	b.n	80007f8 <Game_PlaceBlockMatrix+0x1f8>
	} else if (block == SBlock) {
 800069e:	887b      	ldrh	r3, [r7, #2]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d120      	bne.n	80006e6 <Game_PlaceBlockMatrix+0xe6>
		movingBlock[0][0] = x;
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	4a57      	ldr	r2, [pc, #348]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80006a8:	6013      	str	r3, [r2, #0]
		movingBlock[0][1] = y;
 80006aa:	88bb      	ldrh	r3, [r7, #4]
 80006ac:	4a55      	ldr	r2, [pc, #340]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80006ae:	6053      	str	r3, [r2, #4]
		movingBlock[1][0] = x - 1;
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b53      	ldr	r3, [pc, #332]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80006b8:	609a      	str	r2, [r3, #8]
		movingBlock[1][1] = y;
 80006ba:	88bb      	ldrh	r3, [r7, #4]
 80006bc:	4a51      	ldr	r2, [pc, #324]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80006be:	60d3      	str	r3, [r2, #12]
		movingBlock[2][0] = x - 1;
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b4f      	ldr	r3, [pc, #316]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80006c8:	611a      	str	r2, [r3, #16]
		movingBlock[2][1] = y + 1;
 80006ca:	88bb      	ldrh	r3, [r7, #4]
 80006cc:	3301      	adds	r3, #1
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b4c      	ldr	r3, [pc, #304]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80006d2:	615a      	str	r2, [r3, #20]
		movingBlock[3][0] = x;
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	4a4b      	ldr	r2, [pc, #300]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80006d8:	6193      	str	r3, [r2, #24]
		movingBlock[3][1] = y - 1;
 80006da:	88bb      	ldrh	r3, [r7, #4]
 80006dc:	3b01      	subs	r3, #1
 80006de:	461a      	mov	r2, r3
 80006e0:	4b48      	ldr	r3, [pc, #288]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80006e2:	61da      	str	r2, [r3, #28]
}
 80006e4:	e088      	b.n	80007f8 <Game_PlaceBlockMatrix+0x1f8>
	} else if (block == ZBlock) {
 80006e6:	887b      	ldrh	r3, [r7, #2]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	d120      	bne.n	800072e <Game_PlaceBlockMatrix+0x12e>
		movingBlock[0][0] = x;
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	4a45      	ldr	r2, [pc, #276]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80006f0:	6013      	str	r3, [r2, #0]
		movingBlock[0][1] = y;
 80006f2:	88bb      	ldrh	r3, [r7, #4]
 80006f4:	4a43      	ldr	r2, [pc, #268]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80006f6:	6053      	str	r3, [r2, #4]
		movingBlock[1][0] = x - 1;
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b41      	ldr	r3, [pc, #260]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000700:	609a      	str	r2, [r3, #8]
		movingBlock[1][1] = y;
 8000702:	88bb      	ldrh	r3, [r7, #4]
 8000704:	4a3f      	ldr	r2, [pc, #252]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000706:	60d3      	str	r3, [r2, #12]
		movingBlock[2][0] = x - 1;
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	3b01      	subs	r3, #1
 800070c:	461a      	mov	r2, r3
 800070e:	4b3d      	ldr	r3, [pc, #244]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000710:	611a      	str	r2, [r3, #16]
		movingBlock[2][1] = y - 1;
 8000712:	88bb      	ldrh	r3, [r7, #4]
 8000714:	3b01      	subs	r3, #1
 8000716:	461a      	mov	r2, r3
 8000718:	4b3a      	ldr	r3, [pc, #232]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 800071a:	615a      	str	r2, [r3, #20]
		movingBlock[3][0] = x;
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	4a39      	ldr	r2, [pc, #228]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000720:	6193      	str	r3, [r2, #24]
		movingBlock[3][1] = y + 1;
 8000722:	88bb      	ldrh	r3, [r7, #4]
 8000724:	3301      	adds	r3, #1
 8000726:	461a      	mov	r2, r3
 8000728:	4b36      	ldr	r3, [pc, #216]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 800072a:	61da      	str	r2, [r3, #28]
}
 800072c:	e064      	b.n	80007f8 <Game_PlaceBlockMatrix+0x1f8>
	} else if (block == LBlock) {
 800072e:	887b      	ldrh	r3, [r7, #2]
 8000730:	2b04      	cmp	r3, #4
 8000732:	d11e      	bne.n	8000772 <Game_PlaceBlockMatrix+0x172>
		movingBlock[0][0] = x;
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	4a33      	ldr	r2, [pc, #204]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000738:	6013      	str	r3, [r2, #0]
		movingBlock[0][1] = y;
 800073a:	88bb      	ldrh	r3, [r7, #4]
 800073c:	4a31      	ldr	r2, [pc, #196]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 800073e:	6053      	str	r3, [r2, #4]
		movingBlock[1][0] = x;
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	4a30      	ldr	r2, [pc, #192]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000744:	6093      	str	r3, [r2, #8]
		movingBlock[1][1] = y - 1;
 8000746:	88bb      	ldrh	r3, [r7, #4]
 8000748:	3b01      	subs	r3, #1
 800074a:	461a      	mov	r2, r3
 800074c:	4b2d      	ldr	r3, [pc, #180]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 800074e:	60da      	str	r2, [r3, #12]
		movingBlock[2][0] = x;
 8000750:	88fb      	ldrh	r3, [r7, #6]
 8000752:	4a2c      	ldr	r2, [pc, #176]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000754:	6113      	str	r3, [r2, #16]
		movingBlock[2][1] = y - 2;
 8000756:	88bb      	ldrh	r3, [r7, #4]
 8000758:	3b02      	subs	r3, #2
 800075a:	461a      	mov	r2, r3
 800075c:	4b29      	ldr	r3, [pc, #164]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 800075e:	615a      	str	r2, [r3, #20]
		movingBlock[3][0] = x - 1;
 8000760:	88fb      	ldrh	r3, [r7, #6]
 8000762:	3b01      	subs	r3, #1
 8000764:	461a      	mov	r2, r3
 8000766:	4b27      	ldr	r3, [pc, #156]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000768:	619a      	str	r2, [r3, #24]
		movingBlock[3][1] = y;
 800076a:	88bb      	ldrh	r3, [r7, #4]
 800076c:	4a25      	ldr	r2, [pc, #148]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 800076e:	61d3      	str	r3, [r2, #28]
}
 8000770:	e042      	b.n	80007f8 <Game_PlaceBlockMatrix+0x1f8>
	} else if (block == JBlock) {
 8000772:	887b      	ldrh	r3, [r7, #2]
 8000774:	2b05      	cmp	r3, #5
 8000776:	d11e      	bne.n	80007b6 <Game_PlaceBlockMatrix+0x1b6>
		movingBlock[0][0] = x;
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	4a22      	ldr	r2, [pc, #136]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 800077c:	6013      	str	r3, [r2, #0]
		movingBlock[0][1] = y;
 800077e:	88bb      	ldrh	r3, [r7, #4]
 8000780:	4a20      	ldr	r2, [pc, #128]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000782:	6053      	str	r3, [r2, #4]
		movingBlock[1][0] = x - 1;
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	3b01      	subs	r3, #1
 8000788:	461a      	mov	r2, r3
 800078a:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 800078c:	609a      	str	r2, [r3, #8]
		movingBlock[1][1] = y;
 800078e:	88bb      	ldrh	r3, [r7, #4]
 8000790:	4a1c      	ldr	r2, [pc, #112]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000792:	60d3      	str	r3, [r2, #12]
		movingBlock[2][0] = x;
 8000794:	88fb      	ldrh	r3, [r7, #6]
 8000796:	4a1b      	ldr	r2, [pc, #108]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 8000798:	6113      	str	r3, [r2, #16]
		movingBlock[2][1] = y + 1;
 800079a:	88bb      	ldrh	r3, [r7, #4]
 800079c:	3301      	adds	r3, #1
 800079e:	461a      	mov	r2, r3
 80007a0:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80007a2:	615a      	str	r2, [r3, #20]
		movingBlock[3][0] = x;
 80007a4:	88fb      	ldrh	r3, [r7, #6]
 80007a6:	4a17      	ldr	r2, [pc, #92]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80007a8:	6193      	str	r3, [r2, #24]
		movingBlock[3][1] = y + 2;
 80007aa:	88bb      	ldrh	r3, [r7, #4]
 80007ac:	3302      	adds	r3, #2
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80007b2:	61da      	str	r2, [r3, #28]
}
 80007b4:	e020      	b.n	80007f8 <Game_PlaceBlockMatrix+0x1f8>
	} else if (block == TBlock) {
 80007b6:	887b      	ldrh	r3, [r7, #2]
 80007b8:	2b06      	cmp	r3, #6
 80007ba:	d11d      	bne.n	80007f8 <Game_PlaceBlockMatrix+0x1f8>
		movingBlock[0][0] = x;
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	4a11      	ldr	r2, [pc, #68]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80007c0:	6013      	str	r3, [r2, #0]
		movingBlock[0][1] = y;
 80007c2:	88bb      	ldrh	r3, [r7, #4]
 80007c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80007c6:	6053      	str	r3, [r2, #4]
		movingBlock[1][0] = x;
 80007c8:	88fb      	ldrh	r3, [r7, #6]
 80007ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80007cc:	6093      	str	r3, [r2, #8]
		movingBlock[1][1] = y - 1;
 80007ce:	88bb      	ldrh	r3, [r7, #4]
 80007d0:	3b01      	subs	r3, #1
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80007d6:	60da      	str	r2, [r3, #12]
		movingBlock[2][0] = x;
 80007d8:	88fb      	ldrh	r3, [r7, #6]
 80007da:	4a0a      	ldr	r2, [pc, #40]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80007dc:	6113      	str	r3, [r2, #16]
		movingBlock[2][1] = y + 1;
 80007de:	88bb      	ldrh	r3, [r7, #4]
 80007e0:	3301      	adds	r3, #1
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80007e6:	615a      	str	r2, [r3, #20]
		movingBlock[3][0] = x - 1;
 80007e8:	88fb      	ldrh	r3, [r7, #6]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80007f0:	619a      	str	r2, [r3, #24]
		movingBlock[3][1] = y;			}
 80007f2:	88bb      	ldrh	r3, [r7, #4]
 80007f4:	4a03      	ldr	r2, [pc, #12]	@ (8000804 <Game_PlaceBlockMatrix+0x204>)
 80007f6:	61d3      	str	r3, [r2, #28]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	200002c4 	.word	0x200002c4

08000808 <Game_PlaceSquare>:

void Game_PlaceSquare(uint16_t x, uint16_t y, uint16_t color) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	80fb      	strh	r3, [r7, #6]
 8000812:	460b      	mov	r3, r1
 8000814:	80bb      	strh	r3, [r7, #4]
 8000816:	4613      	mov	r3, r2
 8000818:	807b      	strh	r3, [r7, #2]
	LCD_Draw_Square_Fill(20 + y * 20 + 10, x * 20 + 10, 10, LCD_COLOR_BLACK);
 800081a:	88bb      	ldrh	r3, [r7, #4]
 800081c:	3301      	adds	r3, #1
 800081e:	b29b      	uxth	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	0092      	lsls	r2, r2, #2
 8000824:	4413      	add	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	b29b      	uxth	r3, r3
 800082a:	330a      	adds	r3, #10
 800082c:	b298      	uxth	r0, r3
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	461a      	mov	r2, r3
 8000832:	0092      	lsls	r2, r2, #2
 8000834:	4413      	add	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	b29b      	uxth	r3, r3
 800083a:	330a      	adds	r3, #10
 800083c:	b299      	uxth	r1, r3
 800083e:	2300      	movs	r3, #0
 8000840:	220a      	movs	r2, #10
 8000842:	f000 faf3 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(20 + y * 20 + 10, x * 20 + 10, 9, color);
 8000846:	88bb      	ldrh	r3, [r7, #4]
 8000848:	3301      	adds	r3, #1
 800084a:	b29b      	uxth	r3, r3
 800084c:	461a      	mov	r2, r3
 800084e:	0092      	lsls	r2, r2, #2
 8000850:	4413      	add	r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	b29b      	uxth	r3, r3
 8000856:	330a      	adds	r3, #10
 8000858:	b298      	uxth	r0, r3
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	461a      	mov	r2, r3
 800085e:	0092      	lsls	r2, r2, #2
 8000860:	4413      	add	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	b29b      	uxth	r3, r3
 8000866:	330a      	adds	r3, #10
 8000868:	b299      	uxth	r1, r3
 800086a:	887b      	ldrh	r3, [r7, #2]
 800086c:	2209      	movs	r2, #9
 800086e:	f000 fadd 	bl	8000e2c <LCD_Draw_Square_Fill>

}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <Game_PlaceBlank>:

void Game_PlaceBlank(uint16_t x, uint16_t y){
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	4603      	mov	r3, r0
 8000882:	460a      	mov	r2, r1
 8000884:	80fb      	strh	r3, [r7, #6]
 8000886:	4613      	mov	r3, r2
 8000888:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Square_Fill(20 + y * 20 + 10, x * 20 + 10, 10, LCD_COLOR_WHITE);
 800088a:	88bb      	ldrh	r3, [r7, #4]
 800088c:	3301      	adds	r3, #1
 800088e:	b29b      	uxth	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	0092      	lsls	r2, r2, #2
 8000894:	4413      	add	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	b29b      	uxth	r3, r3
 800089a:	330a      	adds	r3, #10
 800089c:	b298      	uxth	r0, r3
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	461a      	mov	r2, r3
 80008a2:	0092      	lsls	r2, r2, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	330a      	adds	r3, #10
 80008ac:	b299      	uxth	r1, r3
 80008ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008b2:	220a      	movs	r2, #10
 80008b4:	f000 faba 	bl	8000e2c <LCD_Draw_Square_Fill>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <overlap>:
			Game_PlaceBlank(i,j);
		}
	}
}
*/
bool overlap(uint32_t newArray[4][2]) {
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	e02a      	b.n	8000924 <overlap+0x64>
		if (newArray[i][0] < 0 || newArray[i][0] >= numRow) {
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d901      	bls.n	80008e0 <overlap+0x20>
			return true;
 80008dc:	2301      	movs	r3, #1
 80008de:	e025      	b.n	800092c <overlap+0x6c>
		}
		if (newArray[i][1] < 0 || newArray[i][1] >= numCol) {
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	4413      	add	r3, r2
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b09      	cmp	r3, #9
 80008ec:	d901      	bls.n	80008f2 <overlap+0x32>
			return true;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e01c      	b.n	800092c <overlap+0x6c>
		}
		if (gameMatrix[newArray[i][0]][newArray[i][1]]) {
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	440b      	add	r3, r1
 8000904:	6859      	ldr	r1, [r3, #4]
 8000906:	480c      	ldr	r0, [pc, #48]	@ (8000938 <overlap+0x78>)
 8000908:	4613      	mov	r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4413      	add	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	440b      	add	r3, r1
 8000912:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <overlap+0x5e>
			return true;
 800091a:	2301      	movs	r3, #1
 800091c:	e006      	b.n	800092c <overlap+0x6c>
	for (int i = 0; i < 4; i++) {
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3301      	adds	r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b03      	cmp	r3, #3
 8000928:	ddd1      	ble.n	80008ce <overlap+0xe>
		}

	}

	return false;
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	20000044 	.word	0x20000044

0800093c <Game_MoveDown>:
bool Game_MoveDown() {
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	@ 0x38
 8000940:	af00      	add	r7, sp, #0
	uint32_t newLocation[4][2];
	for (int i = 0; i < 4; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	637b      	str	r3, [r7, #52]	@ 0x34
 8000946:	e018      	b.n	800097a <Game_MoveDown+0x3e>
		newLocation[i][0] = movingBlock[i][0] + 1;
 8000948:	4a43      	ldr	r2, [pc, #268]	@ (8000a58 <Game_MoveDown+0x11c>)
 800094a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800094c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	3338      	adds	r3, #56	@ 0x38
 8000958:	443b      	add	r3, r7
 800095a:	f843 2c34 	str.w	r2, [r3, #-52]
		newLocation[i][1] = movingBlock[i][1];
 800095e:	4a3e      	ldr	r2, [pc, #248]	@ (8000a58 <Game_MoveDown+0x11c>)
 8000960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	4413      	add	r3, r2
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	3338      	adds	r3, #56	@ 0x38
 800096e:	443b      	add	r3, r7
 8000970:	f843 2c30 	str.w	r2, [r3, #-48]
	for (int i = 0; i < 4; i++) {
 8000974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000976:	3301      	adds	r3, #1
 8000978:	637b      	str	r3, [r7, #52]	@ 0x34
 800097a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800097c:	2b03      	cmp	r3, #3
 800097e:	dde3      	ble.n	8000948 <Game_MoveDown+0xc>
	}
	if (!overlap(newLocation)) {
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff9c 	bl	80008c0 <overlap>
 8000988:	4603      	mov	r3, r0
 800098a:	f083 0301 	eor.w	r3, r3, #1
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	d05b      	beq.n	8000a4c <Game_MoveDown+0x110>
		for (int i = 0; i < 4; i++) {
 8000994:	2300      	movs	r3, #0
 8000996:	633b      	str	r3, [r7, #48]	@ 0x30
 8000998:	e011      	b.n	80009be <Game_MoveDown+0x82>
			Game_PlaceBlank(movingBlock[i][0],movingBlock[i][1]);
 800099a:	4a2f      	ldr	r2, [pc, #188]	@ (8000a58 <Game_MoveDown+0x11c>)
 800099c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800099e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	492c      	ldr	r1, [pc, #176]	@ (8000a58 <Game_MoveDown+0x11c>)
 80009a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	440b      	add	r3, r1
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	4619      	mov	r1, r3
 80009b2:	4610      	mov	r0, r2
 80009b4:	f7ff ff61 	bl	800087a <Game_PlaceBlank>
		for (int i = 0; i < 4; i++) {
 80009b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009ba:	3301      	adds	r3, #1
 80009bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80009be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009c0:	2b03      	cmp	r3, #3
 80009c2:	ddea      	ble.n	800099a <Game_MoveDown+0x5e>

		}
		for (int i = 0; i < 4; i++) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009c8:	e019      	b.n	80009fe <Game_MoveDown+0xc2>
			Game_PlaceSquare(newLocation[i][0],newLocation[i][1], colorMatrix[currentBlock]);
 80009ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	3338      	adds	r3, #56	@ 0x38
 80009d0:	443b      	add	r3, r7
 80009d2:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80009d6:	b298      	uxth	r0, r3
 80009d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	3338      	adds	r3, #56	@ 0x38
 80009de:	443b      	add	r3, r7
 80009e0:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a5c <Game_MoveDown+0x120>)
 80009e8:	8812      	ldrh	r2, [r2, #0]
 80009ea:	4611      	mov	r1, r2
 80009ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000a60 <Game_MoveDown+0x124>)
 80009ee:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80009f2:	4619      	mov	r1, r3
 80009f4:	f7ff ff08 	bl	8000808 <Game_PlaceSquare>
		for (int i = 0; i < 4; i++) {
 80009f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009fa:	3301      	adds	r3, #1
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	dde2      	ble.n	80009ca <Game_MoveDown+0x8e>

		}
		for (int i = 0; i < 4; i++) {
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a08:	e01b      	b.n	8000a42 <Game_MoveDown+0x106>
			for (int j = 0; j < 2; j++) {
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a0e:	e012      	b.n	8000a36 <Game_MoveDown+0xfa>
				movingBlock[i][j] = newLocation[i][j];
 8000a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a12:	005a      	lsls	r2, r3, #1
 8000a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a16:	4413      	add	r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	3338      	adds	r3, #56	@ 0x38
 8000a1c:	443b      	add	r3, r7
 8000a1e:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8000a22:	480d      	ldr	r0, [pc, #52]	@ (8000a58 <Game_MoveDown+0x11c>)
 8000a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a26:	0059      	lsls	r1, r3, #1
 8000a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2a:	440b      	add	r3, r1
 8000a2c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			for (int j = 0; j < 2; j++) {
 8000a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a32:	3301      	adds	r3, #1
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	dde9      	ble.n	8000a10 <Game_MoveDown+0xd4>
		for (int i = 0; i < 4; i++) {
 8000a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a3e:	3301      	adds	r3, #1
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	dde0      	ble.n	8000a0a <Game_MoveDown+0xce>
			}
		}


		return true;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e000      	b.n	8000a4e <Game_MoveDown+0x112>
	} else {
		return false;
 8000a4c:	2300      	movs	r3, #0
	}
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3738      	adds	r7, #56	@ 0x38
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200002c4 	.word	0x200002c4
 8000a5c:	200002e4 	.word	0x200002e4
 8000a60:	20000000 	.word	0x20000000

08000a64 <Game_Merge>:

void Game_Merge() {
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	e014      	b.n	8000a9a <Game_Merge+0x36>
		gameMatrix[movingBlock[i][0]][movingBlock[i][1]] = 1;
 8000a70:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab0 <Game_Merge+0x4c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000a78:	490d      	ldr	r1, [pc, #52]	@ (8000ab0 <Game_Merge+0x4c>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	440b      	add	r3, r1
 8000a80:	6859      	ldr	r1, [r3, #4]
 8000a82:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <Game_Merge+0x50>)
 8000a84:	4613      	mov	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	440b      	add	r3, r1
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3301      	adds	r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	dde7      	ble.n	8000a70 <Game_Merge+0xc>
	}
}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	200002c4 	.word	0x200002c4
 8000ab4:	20000044 	.word	0x20000044

08000ab8 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	@ 0x30
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	4b5a      	ldr	r3, [pc, #360]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac6:	4a59      	ldr	r2, [pc, #356]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000ac8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ace:	4b57      	ldr	r3, [pc, #348]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ad6:	61bb      	str	r3, [r7, #24]
 8000ad8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	4b53      	ldr	r3, [pc, #332]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a52      	ldr	r2, [pc, #328]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b50      	ldr	r3, [pc, #320]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b4c      	ldr	r3, [pc, #304]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a4b      	ldr	r2, [pc, #300]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b49      	ldr	r3, [pc, #292]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b45      	ldr	r3, [pc, #276]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a44      	ldr	r2, [pc, #272]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b42      	ldr	r3, [pc, #264]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	4b3e      	ldr	r3, [pc, #248]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	4a3d      	ldr	r2, [pc, #244]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b37      	ldr	r3, [pc, #220]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	4a36      	ldr	r2, [pc, #216]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000b54:	f043 0320 	orr.w	r3, r3, #32
 8000b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5a:	4b34      	ldr	r3, [pc, #208]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	f003 0320 	and.w	r3, r3, #32
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b30      	ldr	r3, [pc, #192]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000b70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b2d      	ldr	r3, [pc, #180]	@ (8000c2c <LCD_GPIO_Init+0x174>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000b82:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000b86:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000b94:	230e      	movs	r3, #14
 8000b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4824      	ldr	r0, [pc, #144]	@ (8000c30 <LCD_GPIO_Init+0x178>)
 8000ba0:	f001 fc90 	bl	80024c4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000ba4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000ba8:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4820      	ldr	r0, [pc, #128]	@ (8000c34 <LCD_GPIO_Init+0x17c>)
 8000bb2:	f001 fc87 	bl	80024c4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000bb6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000bba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	481d      	ldr	r0, [pc, #116]	@ (8000c38 <LCD_GPIO_Init+0x180>)
 8000bc4:	f001 fc7e 	bl	80024c4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000bc8:	2348      	movs	r3, #72	@ 0x48
 8000bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	481a      	ldr	r0, [pc, #104]	@ (8000c3c <LCD_GPIO_Init+0x184>)
 8000bd4:	f001 fc76 	bl	80024c4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000bd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4816      	ldr	r0, [pc, #88]	@ (8000c40 <LCD_GPIO_Init+0x188>)
 8000be6:	f001 fc6d 	bl	80024c4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000bea:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000bee:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4813      	ldr	r0, [pc, #76]	@ (8000c44 <LCD_GPIO_Init+0x18c>)
 8000bf8:	f001 fc64 	bl	80024c4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000c00:	2309      	movs	r3, #9
 8000c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480a      	ldr	r0, [pc, #40]	@ (8000c34 <LCD_GPIO_Init+0x17c>)
 8000c0c:	f001 fc5a 	bl	80024c4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000c10:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4809      	ldr	r0, [pc, #36]	@ (8000c44 <LCD_GPIO_Init+0x18c>)
 8000c1e:	f001 fc51 	bl	80024c4 <HAL_GPIO_Init>
}
 8000c22:	bf00      	nop
 8000c24:	3730      	adds	r7, #48	@ 0x30
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000
 8000c34:	40020400 	.word	0x40020400
 8000c38:	40020800 	.word	0x40020800
 8000c3c:	40020c00 	.word	0x40020c00
 8000c40:	40021400 	.word	0x40021400
 8000c44:	40021800 	.word	0x40021800

08000c48 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b090      	sub	sp, #64	@ 0x40
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000c56:	23f0      	movs	r3, #240	@ 0xf0
 8000c58:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000c5e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000c62:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000c64:	2302      	movs	r3, #2
 8000c66:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000c68:	23ff      	movs	r3, #255	@ 0xff
 8000c6a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c74:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c76:	2305      	movs	r3, #5
 8000c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <LTCD_Layer_Init+0x78>)
 8000c82:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000c84:	23f0      	movs	r3, #240	@ 0xf0
 8000c86:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000c88:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000ca0:	79fa      	ldrb	r2, [r7, #7]
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4806      	ldr	r0, [pc, #24]	@ (8000cc4 <LTCD_Layer_Init+0x7c>)
 8000caa:	f001 ffad 	bl	8002c08 <HAL_LTDC_ConfigLayer>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000cb4:	f000 fc63 	bl	800157e <LCD_Error_Handler>
	}
}
 8000cb8:	bf00      	nop
 8000cba:	3740      	adds	r7, #64	@ 0x40
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200003c4 	.word	0x200003c4
 8000cc4:	200002e8 	.word	0x200002e8

08000cc8 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8000d78 <LTCD__Init+0xb0>)
 8000cce:	4a2b      	ldr	r2, [pc, #172]	@ (8000d7c <LTCD__Init+0xb4>)
 8000cd0:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000cd2:	4b29      	ldr	r3, [pc, #164]	@ (8000d78 <LTCD__Init+0xb0>)
 8000cd4:	2209      	movs	r2, #9
 8000cd6:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000cd8:	4b27      	ldr	r3, [pc, #156]	@ (8000d78 <LTCD__Init+0xb0>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000cde:	4b26      	ldr	r3, [pc, #152]	@ (8000d78 <LTCD__Init+0xb0>)
 8000ce0:	221d      	movs	r2, #29
 8000ce2:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000ce4:	4b24      	ldr	r3, [pc, #144]	@ (8000d78 <LTCD__Init+0xb0>)
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000cea:	4b23      	ldr	r3, [pc, #140]	@ (8000d78 <LTCD__Init+0xb0>)
 8000cec:	f240 120d 	movw	r2, #269	@ 0x10d
 8000cf0:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000cf2:	4b21      	ldr	r3, [pc, #132]	@ (8000d78 <LTCD__Init+0xb0>)
 8000cf4:	f240 1243 	movw	r2, #323	@ 0x143
 8000cf8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <LTCD__Init+0xb0>)
 8000cfc:	f240 1217 	movw	r2, #279	@ 0x117
 8000d00:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000d02:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <LTCD__Init+0xb0>)
 8000d04:	f240 1247 	movw	r2, #327	@ 0x147
 8000d08:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <LTCD__Init+0xb0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000d12:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <LTCD__Init+0xb0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000d1a:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <LTCD__Init+0xb0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d22:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <LTCD__Init+0xb8>)
 8000d24:	2208      	movs	r2, #8
 8000d26:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000d28:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <LTCD__Init+0xb8>)
 8000d2a:	22c0      	movs	r2, #192	@ 0xc0
 8000d2c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <LTCD__Init+0xb8>)
 8000d30:	2204      	movs	r2, #4
 8000d32:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000d34:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <LTCD__Init+0xb8>)
 8000d36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d3a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000d3c:	4810      	ldr	r0, [pc, #64]	@ (8000d80 <LTCD__Init+0xb8>)
 8000d3e:	f002 fd9d 	bl	800387c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d42:	4b0d      	ldr	r3, [pc, #52]	@ (8000d78 <LTCD__Init+0xb0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d48:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <LTCD__Init+0xb0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <LTCD__Init+0xb0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <LTCD__Init+0xb0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000d5a:	f7ff fead 	bl	8000ab8 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d5e:	4806      	ldr	r0, [pc, #24]	@ (8000d78 <LTCD__Init+0xb0>)
 8000d60:	f001 fe82 	bl	8002a68 <HAL_LTDC_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000d6a:	f000 fc08 	bl	800157e <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000d6e:	f000 fc7d 	bl	800166c <ili9341_Init>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200002e8 	.word	0x200002e8
 8000d7c:	40016800 	.word	0x40016800
 8000d80:	20000390 	.word	0x20000390

08000d84 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80fb      	strh	r3, [r7, #6]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	80bb      	strh	r3, [r7, #4]
 8000d92:	4613      	mov	r3, r2
 8000d94:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000d96:	88ba      	ldrh	r2, [r7, #4]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	1a9b      	subs	r3, r3, r2
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	461a      	mov	r2, r3
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	4413      	add	r3, r2
 8000da6:	4905      	ldr	r1, [pc, #20]	@ (8000dbc <LCD_Draw_Pixel+0x38>)
 8000da8:	887a      	ldrh	r2, [r7, #2]
 8000daa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	200003c4 	.word	0x200003c4

08000dc0 <LCD_Draw_Rectangle_Fill>:
            }
        }
    }
}

void LCD_Draw_Rectangle_Fill(uint16_t Xpos1, uint16_t Ypos1, uint16_t Xpos2, uint16_t Ypos2, uint16_t color) {
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	4608      	mov	r0, r1
 8000dca:	4611      	mov	r1, r2
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4623      	mov	r3, r4
 8000dd0:	80fb      	strh	r3, [r7, #6]
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80bb      	strh	r3, [r7, #4]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	807b      	strh	r3, [r7, #2]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	803b      	strh	r3, [r7, #0]
	for(int16_t y=Ypos1; y<=Ypos2; y++)
 8000dde:	88bb      	ldrh	r3, [r7, #4]
 8000de0:	81fb      	strh	r3, [r7, #14]
 8000de2:	e019      	b.n	8000e18 <LCD_Draw_Rectangle_Fill+0x58>
		    {
		        for(int16_t x=Xpos1; x<=Xpos2; x++)
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	81bb      	strh	r3, [r7, #12]
 8000de8:	e00b      	b.n	8000e02 <LCD_Draw_Rectangle_Fill+0x42>
		        {

		           LCD_Draw_Pixel(x, y, color);
 8000dea:	89bb      	ldrh	r3, [r7, #12]
 8000dec:	89f9      	ldrh	r1, [r7, #14]
 8000dee:	8c3a      	ldrh	r2, [r7, #32]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ffc7 	bl	8000d84 <LCD_Draw_Pixel>
		        for(int16_t x=Xpos1; x<=Xpos2; x++)
 8000df6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	81bb      	strh	r3, [r7, #12]
 8000e02:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000e06:	887b      	ldrh	r3, [r7, #2]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	ddee      	ble.n	8000dea <LCD_Draw_Rectangle_Fill+0x2a>
	for(int16_t y=Ypos1; y<=Ypos2; y++)
 8000e0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	3301      	adds	r3, #1
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	81fb      	strh	r3, [r7, #14]
 8000e18:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000e1c:	883b      	ldrh	r3, [r7, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	dde0      	ble.n	8000de4 <LCD_Draw_Rectangle_Fill+0x24>

		        }
		    }
}
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd90      	pop	{r4, r7, pc}

08000e2c <LCD_Draw_Square_Fill>:

void LCD_Draw_Square_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t sideLength, uint16_t color){
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4604      	mov	r4, r0
 8000e34:	4608      	mov	r0, r1
 8000e36:	4611      	mov	r1, r2
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4623      	mov	r3, r4
 8000e3c:	80fb      	strh	r3, [r7, #6]
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80bb      	strh	r3, [r7, #4]
 8000e42:	460b      	mov	r3, r1
 8000e44:	807b      	strh	r3, [r7, #2]
 8000e46:	4613      	mov	r3, r2
 8000e48:	803b      	strh	r3, [r7, #0]
	for(int16_t y=-sideLength; y<=sideLength; y++)
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	425b      	negs	r3, r3
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	81fb      	strh	r3, [r7, #14]
 8000e52:	e02d      	b.n	8000eb0 <LCD_Draw_Square_Fill+0x84>
	    {
	        for(int16_t x=-sideLength; x<=sideLength; x++)
 8000e54:	887b      	ldrh	r3, [r7, #2]
 8000e56:	425b      	negs	r3, r3
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	81bb      	strh	r3, [r7, #12]
 8000e5c:	e01d      	b.n	8000e9a <LCD_Draw_Square_Fill+0x6e>
	        {
	            if(MAX(x,y) <= sideLength)
 8000e5e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000e62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e66:	4293      	cmp	r3, r2
 8000e68:	bfb8      	it	lt
 8000e6a:	4613      	movlt	r3, r2
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	461a      	mov	r2, r3
 8000e70:	887b      	ldrh	r3, [r7, #2]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	dc0b      	bgt.n	8000e8e <LCD_Draw_Square_Fill+0x62>
	            {
	            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000e76:	89ba      	ldrh	r2, [r7, #12]
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	b298      	uxth	r0, r3
 8000e7e:	89fa      	ldrh	r2, [r7, #14]
 8000e80:	88bb      	ldrh	r3, [r7, #4]
 8000e82:	4413      	add	r3, r2
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	883a      	ldrh	r2, [r7, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff ff7b 	bl	8000d84 <LCD_Draw_Pixel>
	        for(int16_t x=-sideLength; x<=sideLength; x++)
 8000e8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	3301      	adds	r3, #1
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	81bb      	strh	r3, [r7, #12]
 8000e9a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	dddc      	ble.n	8000e5e <LCD_Draw_Square_Fill+0x32>
	for(int16_t y=-sideLength; y<=sideLength; y++)
 8000ea4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	3301      	adds	r3, #1
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	81fb      	strh	r3, [r7, #14]
 8000eb0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	ddcc      	ble.n	8000e54 <LCD_Draw_Square_Fill+0x28>
	            }
	        }
	    }
}
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd90      	pop	{r4, r7, pc}

08000ec4 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	460a      	mov	r2, r1
 8000ece:	71fb      	strb	r3, [r7, #7]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10e      	bne.n	8000ef8 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	e007      	b.n	8000ef0 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000ee0:	4908      	ldr	r1, [pc, #32]	@ (8000f04 <LCD_Clear+0x40>)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	88ba      	ldrh	r2, [r7, #4]
 8000ee6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3301      	adds	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000ef6:	d3f3      	bcc.n	8000ee0 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	200003c4 	.word	0x200003c4

08000f08 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000f12:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <LCD_SetTextColor+0x1c>)
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	8013      	strh	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	2000000e 	.word	0x2000000e

08000f28 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <LCD_SetFont+0x1c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	200003c0 	.word	0x200003c0

08000f48 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	603a      	str	r2, [r7, #0]
 8000f52:	80fb      	strh	r3, [r7, #6]
 8000f54:	460b      	mov	r3, r1
 8000f56:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	e04c      	b.n	8001000 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	e03f      	b.n	8000fec <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	4b27      	ldr	r3, [pc, #156]	@ (8001018 <LCD_Draw_Char+0xd0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	889b      	ldrh	r3, [r3, #4]
 8000f7e:	4a27      	ldr	r2, [pc, #156]	@ (800101c <LCD_Draw_Char+0xd4>)
 8000f80:	fba2 2303 	umull	r2, r3, r2, r3
 8000f84:	08db      	lsrs	r3, r3, #3
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	2280      	movs	r2, #128	@ 0x80
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	fa42 f303 	asr.w	r3, r2, r3
 8000f94:	400b      	ands	r3, r1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d104      	bne.n	8000fa4 <LCD_Draw_Char+0x5c>
 8000f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <LCD_Draw_Char+0xd0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	889b      	ldrh	r3, [r3, #4]
 8000fa0:	2b0c      	cmp	r3, #12
 8000fa2:	d920      	bls.n	8000fe6 <LCD_Draw_Char+0x9e>
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	fa42 f303 	asr.w	r3, r2, r3
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d104      	bne.n	8000fc8 <LCD_Draw_Char+0x80>
 8000fbe:	4b16      	ldr	r3, [pc, #88]	@ (8001018 <LCD_Draw_Char+0xd0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	889b      	ldrh	r3, [r3, #4]
 8000fc4:	2b0c      	cmp	r3, #12
 8000fc6:	d80e      	bhi.n	8000fe6 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	4413      	add	r3, r2
 8000fd0:	b298      	uxth	r0, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	4a10      	ldr	r2, [pc, #64]	@ (8001020 <LCD_Draw_Char+0xd8>)
 8000fde:	8812      	ldrh	r2, [r2, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f7ff fecf 	bl	8000d84 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <LCD_Draw_Char+0xd0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	889b      	ldrh	r3, [r3, #4]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d3b8      	bcc.n	8000f6c <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <LCD_Draw_Char+0xd0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	88db      	ldrh	r3, [r3, #6]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4293      	cmp	r3, r2
 800100c:	d3ab      	bcc.n	8000f66 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800100e:	bf00      	nop
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200003c0 	.word	0x200003c0
 800101c:	aaaaaaab 	.word	0xaaaaaaab
 8001020:	2000000e 	.word	0x2000000e

08001024 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
 800102e:	460b      	mov	r3, r1
 8001030:	80bb      	strh	r3, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	3b20      	subs	r3, #32
 800103a:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <LCD_DisplayChar+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	78fb      	ldrb	r3, [r7, #3]
 8001044:	4907      	ldr	r1, [pc, #28]	@ (8001064 <LCD_DisplayChar+0x40>)
 8001046:	6809      	ldr	r1, [r1, #0]
 8001048:	88c9      	ldrh	r1, [r1, #6]
 800104a:	fb01 f303 	mul.w	r3, r1, r3
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	441a      	add	r2, r3
 8001052:	88b9      	ldrh	r1, [r7, #4]
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff76 	bl	8000f48 <LCD_Draw_Char>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200003c0 	.word	0x200003c0

08001068 <drawO>:

void drawO(uint16_t Xpos, uint16_t Ypos) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	460a      	mov	r2, r1
 8001072:	80fb      	strh	r3, [r7, #6]
 8001074:	4613      	mov	r3, r2
 8001076:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Square_Fill(Xpos, Ypos, 10, LCD_COLOR_BLACK);
 8001078:	88b9      	ldrh	r1, [r7, #4]
 800107a:	88f8      	ldrh	r0, [r7, #6]
 800107c:	2300      	movs	r3, #0
 800107e:	220a      	movs	r2, #10
 8001080:	f7ff fed4 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos, Ypos, 9, LCD_COLOR_YELLOW);
 8001084:	88b9      	ldrh	r1, [r7, #4]
 8001086:	88f8      	ldrh	r0, [r7, #6]
 8001088:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800108c:	2209      	movs	r2, #9
 800108e:	f7ff fecd 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos, Ypos-20, 10, LCD_COLOR_BLACK);
 8001092:	88bb      	ldrh	r3, [r7, #4]
 8001094:	3b14      	subs	r3, #20
 8001096:	b299      	uxth	r1, r3
 8001098:	88f8      	ldrh	r0, [r7, #6]
 800109a:	2300      	movs	r3, #0
 800109c:	220a      	movs	r2, #10
 800109e:	f7ff fec5 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos, Ypos-20, 9, LCD_COLOR_YELLOW);
 80010a2:	88bb      	ldrh	r3, [r7, #4]
 80010a4:	3b14      	subs	r3, #20
 80010a6:	b299      	uxth	r1, r3
 80010a8:	88f8      	ldrh	r0, [r7, #6]
 80010aa:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80010ae:	2209      	movs	r2, #9
 80010b0:	f7ff febc 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+20, Ypos-20, 10, LCD_COLOR_BLACK);
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	3314      	adds	r3, #20
 80010b8:	b298      	uxth	r0, r3
 80010ba:	88bb      	ldrh	r3, [r7, #4]
 80010bc:	3b14      	subs	r3, #20
 80010be:	b299      	uxth	r1, r3
 80010c0:	2300      	movs	r3, #0
 80010c2:	220a      	movs	r2, #10
 80010c4:	f7ff feb2 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+20, Ypos-20, 9, LCD_COLOR_YELLOW);
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	3314      	adds	r3, #20
 80010cc:	b298      	uxth	r0, r3
 80010ce:	88bb      	ldrh	r3, [r7, #4]
 80010d0:	3b14      	subs	r3, #20
 80010d2:	b299      	uxth	r1, r3
 80010d4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80010d8:	2209      	movs	r2, #9
 80010da:	f7ff fea7 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+20, Ypos, 10, LCD_COLOR_BLACK);
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	3314      	adds	r3, #20
 80010e2:	b298      	uxth	r0, r3
 80010e4:	88b9      	ldrh	r1, [r7, #4]
 80010e6:	2300      	movs	r3, #0
 80010e8:	220a      	movs	r2, #10
 80010ea:	f7ff fe9f 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+20, Ypos, 9, LCD_COLOR_YELLOW);
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	3314      	adds	r3, #20
 80010f2:	b298      	uxth	r0, r3
 80010f4:	88b9      	ldrh	r1, [r7, #4]
 80010f6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80010fa:	2209      	movs	r2, #9
 80010fc:	f7ff fe96 	bl	8000e2c <LCD_Draw_Square_Fill>

}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <drawZ>:

void drawZ(uint16_t Xpos, uint16_t Ypos) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	460a      	mov	r2, r1
 8001112:	80fb      	strh	r3, [r7, #6]
 8001114:	4613      	mov	r3, r2
 8001116:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Square_Fill(Xpos,Ypos,10,LCD_COLOR_BLACK);
 8001118:	88b9      	ldrh	r1, [r7, #4]
 800111a:	88f8      	ldrh	r0, [r7, #6]
 800111c:	2300      	movs	r3, #0
 800111e:	220a      	movs	r2, #10
 8001120:	f7ff fe84 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos,Ypos,9,LCD_COLOR_GREEN);
 8001124:	88b9      	ldrh	r1, [r7, #4]
 8001126:	88f8      	ldrh	r0, [r7, #6]
 8001128:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800112c:	2209      	movs	r2, #9
 800112e:	f7ff fe7d 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos,Ypos-20,10,LCD_COLOR_BLACK);
 8001132:	88bb      	ldrh	r3, [r7, #4]
 8001134:	3b14      	subs	r3, #20
 8001136:	b299      	uxth	r1, r3
 8001138:	88f8      	ldrh	r0, [r7, #6]
 800113a:	2300      	movs	r3, #0
 800113c:	220a      	movs	r2, #10
 800113e:	f7ff fe75 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos,Ypos-20,9,LCD_COLOR_GREEN);
 8001142:	88bb      	ldrh	r3, [r7, #4]
 8001144:	3b14      	subs	r3, #20
 8001146:	b299      	uxth	r1, r3
 8001148:	88f8      	ldrh	r0, [r7, #6]
 800114a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800114e:	2209      	movs	r2, #9
 8001150:	f7ff fe6c 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos-20,Ypos-20,10,LCD_COLOR_BLACK);
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	3b14      	subs	r3, #20
 8001158:	b298      	uxth	r0, r3
 800115a:	88bb      	ldrh	r3, [r7, #4]
 800115c:	3b14      	subs	r3, #20
 800115e:	b299      	uxth	r1, r3
 8001160:	2300      	movs	r3, #0
 8001162:	220a      	movs	r2, #10
 8001164:	f7ff fe62 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos-20,Ypos-20,9,LCD_COLOR_GREEN);
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	3b14      	subs	r3, #20
 800116c:	b298      	uxth	r0, r3
 800116e:	88bb      	ldrh	r3, [r7, #4]
 8001170:	3b14      	subs	r3, #20
 8001172:	b299      	uxth	r1, r3
 8001174:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001178:	2209      	movs	r2, #9
 800117a:	f7ff fe57 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+20,Ypos,10,LCD_COLOR_BLACK);
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	3314      	adds	r3, #20
 8001182:	b298      	uxth	r0, r3
 8001184:	88b9      	ldrh	r1, [r7, #4]
 8001186:	2300      	movs	r3, #0
 8001188:	220a      	movs	r2, #10
 800118a:	f7ff fe4f 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+20,Ypos,9,LCD_COLOR_GREEN);
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	3314      	adds	r3, #20
 8001192:	b298      	uxth	r0, r3
 8001194:	88b9      	ldrh	r1, [r7, #4]
 8001196:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800119a:	2209      	movs	r2, #9
 800119c:	f7ff fe46 	bl	8000e2c <LCD_Draw_Square_Fill>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <drawS>:

void drawS(uint16_t Xpos, uint16_t Ypos) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	460a      	mov	r2, r1
 80011b2:	80fb      	strh	r3, [r7, #6]
 80011b4:	4613      	mov	r3, r2
 80011b6:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Square_Fill(Xpos,Ypos,10,LCD_COLOR_BLACK);
 80011b8:	88b9      	ldrh	r1, [r7, #4]
 80011ba:	88f8      	ldrh	r0, [r7, #6]
 80011bc:	2300      	movs	r3, #0
 80011be:	220a      	movs	r2, #10
 80011c0:	f7ff fe34 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos,Ypos,9,LCD_COLOR_RED);
 80011c4:	88b9      	ldrh	r1, [r7, #4]
 80011c6:	88f8      	ldrh	r0, [r7, #6]
 80011c8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011cc:	2209      	movs	r2, #9
 80011ce:	f7ff fe2d 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos,Ypos-20,10,LCD_COLOR_BLACK);
 80011d2:	88bb      	ldrh	r3, [r7, #4]
 80011d4:	3b14      	subs	r3, #20
 80011d6:	b299      	uxth	r1, r3
 80011d8:	88f8      	ldrh	r0, [r7, #6]
 80011da:	2300      	movs	r3, #0
 80011dc:	220a      	movs	r2, #10
 80011de:	f7ff fe25 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos,Ypos-20,9,LCD_COLOR_RED);
 80011e2:	88bb      	ldrh	r3, [r7, #4]
 80011e4:	3b14      	subs	r3, #20
 80011e6:	b299      	uxth	r1, r3
 80011e8:	88f8      	ldrh	r0, [r7, #6]
 80011ea:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011ee:	2209      	movs	r2, #9
 80011f0:	f7ff fe1c 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+20,Ypos-20,10,LCD_COLOR_BLACK);
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	3314      	adds	r3, #20
 80011f8:	b298      	uxth	r0, r3
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	3b14      	subs	r3, #20
 80011fe:	b299      	uxth	r1, r3
 8001200:	2300      	movs	r3, #0
 8001202:	220a      	movs	r2, #10
 8001204:	f7ff fe12 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+20,Ypos-20,9,LCD_COLOR_RED);
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	3314      	adds	r3, #20
 800120c:	b298      	uxth	r0, r3
 800120e:	88bb      	ldrh	r3, [r7, #4]
 8001210:	3b14      	subs	r3, #20
 8001212:	b299      	uxth	r1, r3
 8001214:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001218:	2209      	movs	r2, #9
 800121a:	f7ff fe07 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos-20,Ypos,10,LCD_COLOR_BLACK);
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	3b14      	subs	r3, #20
 8001222:	b298      	uxth	r0, r3
 8001224:	88b9      	ldrh	r1, [r7, #4]
 8001226:	2300      	movs	r3, #0
 8001228:	220a      	movs	r2, #10
 800122a:	f7ff fdff 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos-20,Ypos,9,LCD_COLOR_RED);
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	3b14      	subs	r3, #20
 8001232:	b298      	uxth	r0, r3
 8001234:	88b9      	ldrh	r1, [r7, #4]
 8001236:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800123a:	2209      	movs	r2, #9
 800123c:	f7ff fdf6 	bl	8000e2c <LCD_Draw_Square_Fill>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <drawI>:

void drawI(uint16_t Xpos, uint16_t Ypos) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	460a      	mov	r2, r1
 8001252:	80fb      	strh	r3, [r7, #6]
 8001254:	4613      	mov	r3, r2
 8001256:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Square_Fill(Xpos,Ypos,10,LCD_COLOR_BLACK);
 8001258:	88b9      	ldrh	r1, [r7, #4]
 800125a:	88f8      	ldrh	r0, [r7, #6]
 800125c:	2300      	movs	r3, #0
 800125e:	220a      	movs	r2, #10
 8001260:	f7ff fde4 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos,Ypos,9,LCD_COLOR_CYAN);
 8001264:	88b9      	ldrh	r1, [r7, #4]
 8001266:	88f8      	ldrh	r0, [r7, #6]
 8001268:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800126c:	2209      	movs	r2, #9
 800126e:	f7ff fddd 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos-20,Ypos,10,LCD_COLOR_BLACK);
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	3b14      	subs	r3, #20
 8001276:	b298      	uxth	r0, r3
 8001278:	88b9      	ldrh	r1, [r7, #4]
 800127a:	2300      	movs	r3, #0
 800127c:	220a      	movs	r2, #10
 800127e:	f7ff fdd5 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos-20,Ypos,9,LCD_COLOR_CYAN);
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	3b14      	subs	r3, #20
 8001286:	b298      	uxth	r0, r3
 8001288:	88b9      	ldrh	r1, [r7, #4]
 800128a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800128e:	2209      	movs	r2, #9
 8001290:	f7ff fdcc 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+20,Ypos,10,LCD_COLOR_BLACK);
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	3314      	adds	r3, #20
 8001298:	b298      	uxth	r0, r3
 800129a:	88b9      	ldrh	r1, [r7, #4]
 800129c:	2300      	movs	r3, #0
 800129e:	220a      	movs	r2, #10
 80012a0:	f7ff fdc4 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+20,Ypos,9,LCD_COLOR_CYAN);
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	3314      	adds	r3, #20
 80012a8:	b298      	uxth	r0, r3
 80012aa:	88b9      	ldrh	r1, [r7, #4]
 80012ac:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80012b0:	2209      	movs	r2, #9
 80012b2:	f7ff fdbb 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+40,Ypos,10,LCD_COLOR_BLACK);
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	3328      	adds	r3, #40	@ 0x28
 80012ba:	b298      	uxth	r0, r3
 80012bc:	88b9      	ldrh	r1, [r7, #4]
 80012be:	2300      	movs	r3, #0
 80012c0:	220a      	movs	r2, #10
 80012c2:	f7ff fdb3 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+40,Ypos,9,LCD_COLOR_CYAN);
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	3328      	adds	r3, #40	@ 0x28
 80012ca:	b298      	uxth	r0, r3
 80012cc:	88b9      	ldrh	r1, [r7, #4]
 80012ce:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80012d2:	2209      	movs	r2, #9
 80012d4:	f7ff fdaa 	bl	8000e2c <LCD_Draw_Square_Fill>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <drawL>:

void drawL(uint16_t Xpos, uint16_t Ypos) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	460a      	mov	r2, r1
 80012ea:	80fb      	strh	r3, [r7, #6]
 80012ec:	4613      	mov	r3, r2
 80012ee:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Square_Fill(Xpos,Ypos,10,LCD_COLOR_BLACK);
 80012f0:	88b9      	ldrh	r1, [r7, #4]
 80012f2:	88f8      	ldrh	r0, [r7, #6]
 80012f4:	2300      	movs	r3, #0
 80012f6:	220a      	movs	r2, #10
 80012f8:	f7ff fd98 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos,Ypos,9,LCD_COLOR_ORANGE);
 80012fc:	88b9      	ldrh	r1, [r7, #4]
 80012fe:	88f8      	ldrh	r0, [r7, #6]
 8001300:	f24f 4360 	movw	r3, #62560	@ 0xf460
 8001304:	2209      	movs	r2, #9
 8001306:	f7ff fd91 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos-20,Ypos,10,LCD_COLOR_BLACK);
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	3b14      	subs	r3, #20
 800130e:	b298      	uxth	r0, r3
 8001310:	88b9      	ldrh	r1, [r7, #4]
 8001312:	2300      	movs	r3, #0
 8001314:	220a      	movs	r2, #10
 8001316:	f7ff fd89 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos-20,Ypos,9,LCD_COLOR_ORANGE);
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	3b14      	subs	r3, #20
 800131e:	b298      	uxth	r0, r3
 8001320:	88b9      	ldrh	r1, [r7, #4]
 8001322:	f24f 4360 	movw	r3, #62560	@ 0xf460
 8001326:	2209      	movs	r2, #9
 8001328:	f7ff fd80 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos-40,Ypos,10,LCD_COLOR_BLACK);
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	3b28      	subs	r3, #40	@ 0x28
 8001330:	b298      	uxth	r0, r3
 8001332:	88b9      	ldrh	r1, [r7, #4]
 8001334:	2300      	movs	r3, #0
 8001336:	220a      	movs	r2, #10
 8001338:	f7ff fd78 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos-40,Ypos,9,LCD_COLOR_ORANGE);
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	3b28      	subs	r3, #40	@ 0x28
 8001340:	b298      	uxth	r0, r3
 8001342:	88b9      	ldrh	r1, [r7, #4]
 8001344:	f24f 4360 	movw	r3, #62560	@ 0xf460
 8001348:	2209      	movs	r2, #9
 800134a:	f7ff fd6f 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos,Ypos-20,10,LCD_COLOR_BLACK);
 800134e:	88bb      	ldrh	r3, [r7, #4]
 8001350:	3b14      	subs	r3, #20
 8001352:	b299      	uxth	r1, r3
 8001354:	88f8      	ldrh	r0, [r7, #6]
 8001356:	2300      	movs	r3, #0
 8001358:	220a      	movs	r2, #10
 800135a:	f7ff fd67 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos,Ypos-20,9,LCD_COLOR_ORANGE);
 800135e:	88bb      	ldrh	r3, [r7, #4]
 8001360:	3b14      	subs	r3, #20
 8001362:	b299      	uxth	r1, r3
 8001364:	88f8      	ldrh	r0, [r7, #6]
 8001366:	f24f 4360 	movw	r3, #62560	@ 0xf460
 800136a:	2209      	movs	r2, #9
 800136c:	f7ff fd5e 	bl	8000e2c <LCD_Draw_Square_Fill>
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <drawJ>:

void drawJ(uint16_t Xpos, uint16_t Ypos) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	460a      	mov	r2, r1
 8001382:	80fb      	strh	r3, [r7, #6]
 8001384:	4613      	mov	r3, r2
 8001386:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Square_Fill(Xpos,Ypos,10,LCD_COLOR_BLACK);
 8001388:	88b9      	ldrh	r1, [r7, #4]
 800138a:	88f8      	ldrh	r0, [r7, #6]
 800138c:	2300      	movs	r3, #0
 800138e:	220a      	movs	r2, #10
 8001390:	f7ff fd4c 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos,Ypos,9,LCD_COLOR_MAGENTA);
 8001394:	88b9      	ldrh	r1, [r7, #4]
 8001396:	88f8      	ldrh	r0, [r7, #6]
 8001398:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800139c:	2209      	movs	r2, #9
 800139e:	f7ff fd45 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos,Ypos-20,10,LCD_COLOR_BLACK);
 80013a2:	88bb      	ldrh	r3, [r7, #4]
 80013a4:	3b14      	subs	r3, #20
 80013a6:	b299      	uxth	r1, r3
 80013a8:	88f8      	ldrh	r0, [r7, #6]
 80013aa:	2300      	movs	r3, #0
 80013ac:	220a      	movs	r2, #10
 80013ae:	f7ff fd3d 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos,Ypos-20,9,LCD_COLOR_MAGENTA);
 80013b2:	88bb      	ldrh	r3, [r7, #4]
 80013b4:	3b14      	subs	r3, #20
 80013b6:	b299      	uxth	r1, r3
 80013b8:	88f8      	ldrh	r0, [r7, #6]
 80013ba:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80013be:	2209      	movs	r2, #9
 80013c0:	f7ff fd34 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+20,Ypos,10,LCD_COLOR_BLACK);
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	3314      	adds	r3, #20
 80013c8:	b298      	uxth	r0, r3
 80013ca:	88b9      	ldrh	r1, [r7, #4]
 80013cc:	2300      	movs	r3, #0
 80013ce:	220a      	movs	r2, #10
 80013d0:	f7ff fd2c 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+20,Ypos,9,LCD_COLOR_MAGENTA);
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	3314      	adds	r3, #20
 80013d8:	b298      	uxth	r0, r3
 80013da:	88b9      	ldrh	r1, [r7, #4]
 80013dc:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80013e0:	2209      	movs	r2, #9
 80013e2:	f7ff fd23 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+40,Ypos,10,LCD_COLOR_BLACK);
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	3328      	adds	r3, #40	@ 0x28
 80013ea:	b298      	uxth	r0, r3
 80013ec:	88b9      	ldrh	r1, [r7, #4]
 80013ee:	2300      	movs	r3, #0
 80013f0:	220a      	movs	r2, #10
 80013f2:	f7ff fd1b 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+40,Ypos,9,LCD_COLOR_MAGENTA);
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	3328      	adds	r3, #40	@ 0x28
 80013fa:	b298      	uxth	r0, r3
 80013fc:	88b9      	ldrh	r1, [r7, #4]
 80013fe:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001402:	2209      	movs	r2, #9
 8001404:	f7ff fd12 	bl	8000e2c <LCD_Draw_Square_Fill>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <drawT>:

void drawT(uint16_t Xpos, uint16_t Ypos) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	460a      	mov	r2, r1
 800141a:	80fb      	strh	r3, [r7, #6]
 800141c:	4613      	mov	r3, r2
 800141e:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Square_Fill(Xpos,Ypos,10,LCD_COLOR_BLACK);
 8001420:	88b9      	ldrh	r1, [r7, #4]
 8001422:	88f8      	ldrh	r0, [r7, #6]
 8001424:	2300      	movs	r3, #0
 8001426:	220a      	movs	r2, #10
 8001428:	f7ff fd00 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos,Ypos,9,LCD_COLOR_PURPLE);
 800142c:	88b9      	ldrh	r1, [r7, #4]
 800142e:	88f8      	ldrh	r0, [r7, #6]
 8001430:	f24a 23ff 	movw	r3, #41727	@ 0xa2ff
 8001434:	2209      	movs	r2, #9
 8001436:	f7ff fcf9 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos-20,Ypos,10,LCD_COLOR_BLACK);
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	3b14      	subs	r3, #20
 800143e:	b298      	uxth	r0, r3
 8001440:	88b9      	ldrh	r1, [r7, #4]
 8001442:	2300      	movs	r3, #0
 8001444:	220a      	movs	r2, #10
 8001446:	f7ff fcf1 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos-20,Ypos,9,LCD_COLOR_PURPLE);
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	3b14      	subs	r3, #20
 800144e:	b298      	uxth	r0, r3
 8001450:	88b9      	ldrh	r1, [r7, #4]
 8001452:	f24a 23ff 	movw	r3, #41727	@ 0xa2ff
 8001456:	2209      	movs	r2, #9
 8001458:	f7ff fce8 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+20,Ypos,10,LCD_COLOR_BLACK);
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	3314      	adds	r3, #20
 8001460:	b298      	uxth	r0, r3
 8001462:	88b9      	ldrh	r1, [r7, #4]
 8001464:	2300      	movs	r3, #0
 8001466:	220a      	movs	r2, #10
 8001468:	f7ff fce0 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos+20,Ypos,9,LCD_COLOR_PURPLE);
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	3314      	adds	r3, #20
 8001470:	b298      	uxth	r0, r3
 8001472:	88b9      	ldrh	r1, [r7, #4]
 8001474:	f24a 23ff 	movw	r3, #41727	@ 0xa2ff
 8001478:	2209      	movs	r2, #9
 800147a:	f7ff fcd7 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos,Ypos-20,10,LCD_COLOR_BLACK);
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	3b14      	subs	r3, #20
 8001482:	b299      	uxth	r1, r3
 8001484:	88f8      	ldrh	r0, [r7, #6]
 8001486:	2300      	movs	r3, #0
 8001488:	220a      	movs	r2, #10
 800148a:	f7ff fccf 	bl	8000e2c <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(Xpos,Ypos-20,9,LCD_COLOR_PURPLE);
 800148e:	88bb      	ldrh	r3, [r7, #4]
 8001490:	3b14      	subs	r3, #20
 8001492:	b299      	uxth	r1, r3
 8001494:	88f8      	ldrh	r0, [r7, #6]
 8001496:	f24a 23ff 	movw	r3, #41727	@ 0xa2ff
 800149a:	2209      	movs	r2, #9
 800149c:	f7ff fcc6 	bl	8000e2c <LCD_Draw_Square_Fill>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <menuScreen>:

void menuScreen() {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_WHITE);
 80014ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff fd07 	bl	8000ec4 <LCD_Clear>
	drawZ(120,90);
 80014b6:	215a      	movs	r1, #90	@ 0x5a
 80014b8:	2078      	movs	r0, #120	@ 0x78
 80014ba:	f7ff fe25 	bl	8001108 <drawZ>

	drawO(40,100);
 80014be:	2164      	movs	r1, #100	@ 0x64
 80014c0:	2028      	movs	r0, #40	@ 0x28
 80014c2:	f7ff fdd1 	bl	8001068 <drawO>

	drawS(180,40);
 80014c6:	2128      	movs	r1, #40	@ 0x28
 80014c8:	20b4      	movs	r0, #180	@ 0xb4
 80014ca:	f7ff fe6d 	bl	80011a8 <drawS>

	drawI(60,240);
 80014ce:	21f0      	movs	r1, #240	@ 0xf0
 80014d0:	203c      	movs	r0, #60	@ 0x3c
 80014d2:	f7ff feb9 	bl	8001248 <drawI>

	drawL(160,200);
 80014d6:	21c8      	movs	r1, #200	@ 0xc8
 80014d8:	20a0      	movs	r0, #160	@ 0xa0
 80014da:	f7ff ff01 	bl	80012e0 <drawL>

	drawJ(180,260);
 80014de:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80014e2:	20b4      	movs	r0, #180	@ 0xb4
 80014e4:	f7ff ff48 	bl	8001378 <drawJ>

	drawT(60,300);
 80014e8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80014ec:	203c      	movs	r0, #60	@ 0x3c
 80014ee:	f7ff ff8f 	bl	8001410 <drawT>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff fd08 	bl	8000f08 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80014f8:	4811      	ldr	r0, [pc, #68]	@ (8001540 <menuScreen+0x98>)
 80014fa:	f7ff fd15 	bl	8000f28 <LCD_SetFont>

	LCD_DisplayChar(90,140,'T');
 80014fe:	2254      	movs	r2, #84	@ 0x54
 8001500:	218c      	movs	r1, #140	@ 0x8c
 8001502:	205a      	movs	r0, #90	@ 0x5a
 8001504:	f7ff fd8e 	bl	8001024 <LCD_DisplayChar>
	LCD_DisplayChar(105,140,'e');
 8001508:	2265      	movs	r2, #101	@ 0x65
 800150a:	218c      	movs	r1, #140	@ 0x8c
 800150c:	2069      	movs	r0, #105	@ 0x69
 800150e:	f7ff fd89 	bl	8001024 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'t');
 8001512:	2274      	movs	r2, #116	@ 0x74
 8001514:	218c      	movs	r1, #140	@ 0x8c
 8001516:	2073      	movs	r0, #115	@ 0x73
 8001518:	f7ff fd84 	bl	8001024 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'r');
 800151c:	2272      	movs	r2, #114	@ 0x72
 800151e:	218c      	movs	r1, #140	@ 0x8c
 8001520:	207d      	movs	r0, #125	@ 0x7d
 8001522:	f7ff fd7f 	bl	8001024 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'i');
 8001526:	2269      	movs	r2, #105	@ 0x69
 8001528:	218c      	movs	r1, #140	@ 0x8c
 800152a:	2082      	movs	r0, #130	@ 0x82
 800152c:	f7ff fd7a 	bl	8001024 <LCD_DisplayChar>
	LCD_DisplayChar(140,140,'s');
 8001530:	2273      	movs	r2, #115	@ 0x73
 8001532:	218c      	movs	r1, #140	@ 0x8c
 8001534:	208c      	movs	r0, #140	@ 0x8c
 8001536:	f7ff fd75 	bl	8001024 <LCD_DisplayChar>

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000010 	.word	0x20000010

08001544 <playScreen>:

void playScreen() {
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_WHITE);
 800154a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff fcb8 	bl	8000ec4 <LCD_Clear>
	LCD_Draw_Rectangle_Fill(0,0,20,320,LCD_COLOR_BLACK);
 8001554:	2300      	movs	r3, #0
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800155c:	2214      	movs	r2, #20
 800155e:	2100      	movs	r1, #0
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff fc2d 	bl	8000dc0 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Rectangle_Fill(220,0,240,320,LCD_COLOR_BLACK);
 8001566:	2300      	movs	r3, #0
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800156e:	22f0      	movs	r2, #240	@ 0xf0
 8001570:	2100      	movs	r1, #0
 8001572:	20dc      	movs	r0, #220	@ 0xdc
 8001574:	f7ff fc24 	bl	8000dc0 <LCD_Draw_Rectangle_Fill>
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001582:	b672      	cpsid	i
}
 8001584:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001586:	bf00      	nop
 8001588:	e7fd      	b.n	8001586 <LCD_Error_Handler+0x8>
	...

0800158c <RNG_Init>:
 *  Created on: Dec 3, 2024
 *      Author: boony
 */
#include "RNG.h"
static RNG_HandleTypeDef hrng;
void RNG_Init() {
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	//__HAL_RCC_RNG_CLK_ENABLE();
	//__HAL_RCC_RNG_FORCE_RESET();
	//__HAL_RCC_RNG_RELEASE_RESET();

	hrng.Instance = RNG;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <RNG_Init+0x20>)
 8001592:	4a07      	ldr	r2, [pc, #28]	@ (80015b0 <RNG_Init+0x24>)
 8001594:	601a      	str	r2, [r3, #0]
//	hrng.State = HAL_RNG_STATE_READY;
	if(HAL_RNG_Init(&hrng) != HAL_OK) {
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <RNG_Init+0x20>)
 8001598:	f002 fb30 	bl	8003bfc <HAL_RNG_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <RNG_Init+0x1a>
		Error_Handler();
 80015a2:	f000 fbc3 	bl	8001d2c <Error_Handler>
	}
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20025bc4 	.word	0x20025bc4
 80015b0:	50060800 	.word	0x50060800

080015b4 <generateNumber7>:

uint32_t generateNumber7() {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
	hrng.Instance = RNG;
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <generateNumber7+0x48>)
 80015bc:	4a10      	ldr	r2, [pc, #64]	@ (8001600 <generateNumber7+0x4c>)
 80015be:	601a      	str	r2, [r3, #0]
	//	hrng.State = HAL_RNG_STATE_READY;
	if(HAL_RNG_Init(&hrng) != HAL_OK) {
 80015c0:	480e      	ldr	r0, [pc, #56]	@ (80015fc <generateNumber7+0x48>)
 80015c2:	f002 fb1b 	bl	8003bfc <HAL_RNG_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <generateNumber7+0x1c>
		Error_Handler();
 80015cc:	f000 fbae 	bl	8001d2c <Error_Handler>
	}
	uint32_t volatile randomNum = HAL_RNG_GetRandomNumber(&hrng);
 80015d0:	480a      	ldr	r0, [pc, #40]	@ (80015fc <generateNumber7+0x48>)
 80015d2:	f002 fb93 	bl	8003cfc <HAL_RNG_GetRandomNumber>
 80015d6:	4603      	mov	r3, r0
 80015d8:	607b      	str	r3, [r7, #4]
//	HAL_RNG_GenerateRandomNumber(&hrng, &randomNum);
//	HAL_RNG_GenerateRandomNumber(&hrng, &randomNum);
//	HAL_RNG_GenerateRandomNumber(&hrng, &randomNum);
	//HAL_RNG_GenerateRandomNumber(&hrng, &randomNum);

	return randomNum % 7;
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <generateNumber7+0x50>)
 80015de:	fba3 1302 	umull	r1, r3, r3, r2
 80015e2:	1ad1      	subs	r1, r2, r3
 80015e4:	0849      	lsrs	r1, r1, #1
 80015e6:	440b      	add	r3, r1
 80015e8:	0899      	lsrs	r1, r3, #2
 80015ea:	460b      	mov	r3, r1
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	1a5b      	subs	r3, r3, r1
 80015f0:	1ad1      	subs	r1, r2, r3
 80015f2:	460b      	mov	r3, r1

	//return HAL_RNG_GetRandomNumber(&hrng) % 7;

}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20025bc4 	.word	0x20025bc4
 8001600:	50060800 	.word	0x50060800
 8001604:	24924925 	.word	0x24924925

08001608 <addSchedulerEvent>:
 */

#include "Scheduler.h"

static uint32_t scheduledEvents;
void addSchedulerEvent(uint32_t event) {
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event;
 8001610:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <addSchedulerEvent+0x20>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4313      	orrs	r3, r2
 8001618:	4a03      	ldr	r2, [pc, #12]	@ (8001628 <addSchedulerEvent+0x20>)
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	20025bd4 	.word	0x20025bd4

0800162c <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event) {
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~(event);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	43da      	mvns	r2, r3
 8001638:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <removeSchedulerEvent+0x24>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4013      	ands	r3, r2
 800163e:	4a04      	ldr	r2, [pc, #16]	@ (8001650 <removeSchedulerEvent+0x24>)
 8001640:	6013      	str	r3, [r2, #0]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20025bd4 	.word	0x20025bd4

08001654 <getScheduledEvents>:

uint32_t getScheduledEvents() {
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8001658:	4b03      	ldr	r3, [pc, #12]	@ (8001668 <getScheduledEvents+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20025bd4 	.word	0x20025bd4

0800166c <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001670:	f000 f9fe 	bl	8001a70 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001674:	20ca      	movs	r0, #202	@ 0xca
 8001676:	f000 f943 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800167a:	20c3      	movs	r0, #195	@ 0xc3
 800167c:	f000 f94d 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001680:	2008      	movs	r0, #8
 8001682:	f000 f94a 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001686:	2050      	movs	r0, #80	@ 0x50
 8001688:	f000 f947 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 800168c:	20cf      	movs	r0, #207	@ 0xcf
 800168e:	f000 f937 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001692:	2000      	movs	r0, #0
 8001694:	f000 f941 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001698:	20c1      	movs	r0, #193	@ 0xc1
 800169a:	f000 f93e 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800169e:	2030      	movs	r0, #48	@ 0x30
 80016a0:	f000 f93b 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80016a4:	20ed      	movs	r0, #237	@ 0xed
 80016a6:	f000 f92b 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80016aa:	2064      	movs	r0, #100	@ 0x64
 80016ac:	f000 f935 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f000 f932 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80016b6:	2012      	movs	r0, #18
 80016b8:	f000 f92f 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80016bc:	2081      	movs	r0, #129	@ 0x81
 80016be:	f000 f92c 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80016c2:	20e8      	movs	r0, #232	@ 0xe8
 80016c4:	f000 f91c 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80016c8:	2085      	movs	r0, #133	@ 0x85
 80016ca:	f000 f926 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f000 f923 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80016d4:	2078      	movs	r0, #120	@ 0x78
 80016d6:	f000 f920 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80016da:	20cb      	movs	r0, #203	@ 0xcb
 80016dc:	f000 f910 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80016e0:	2039      	movs	r0, #57	@ 0x39
 80016e2:	f000 f91a 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80016e6:	202c      	movs	r0, #44	@ 0x2c
 80016e8:	f000 f917 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f000 f914 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80016f2:	2034      	movs	r0, #52	@ 0x34
 80016f4:	f000 f911 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80016f8:	2002      	movs	r0, #2
 80016fa:	f000 f90e 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80016fe:	20f7      	movs	r0, #247	@ 0xf7
 8001700:	f000 f8fe 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001704:	2020      	movs	r0, #32
 8001706:	f000 f908 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 800170a:	20ea      	movs	r0, #234	@ 0xea
 800170c:	f000 f8f8 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001710:	2000      	movs	r0, #0
 8001712:	f000 f902 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001716:	2000      	movs	r0, #0
 8001718:	f000 f8ff 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 800171c:	20b1      	movs	r0, #177	@ 0xb1
 800171e:	f000 f8ef 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001722:	2000      	movs	r0, #0
 8001724:	f000 f8f9 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001728:	201b      	movs	r0, #27
 800172a:	f000 f8f6 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800172e:	20b6      	movs	r0, #182	@ 0xb6
 8001730:	f000 f8e6 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001734:	200a      	movs	r0, #10
 8001736:	f000 f8f0 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 800173a:	20a2      	movs	r0, #162	@ 0xa2
 800173c:	f000 f8ed 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001740:	20c0      	movs	r0, #192	@ 0xc0
 8001742:	f000 f8dd 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001746:	2010      	movs	r0, #16
 8001748:	f000 f8e7 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800174c:	20c1      	movs	r0, #193	@ 0xc1
 800174e:	f000 f8d7 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001752:	2010      	movs	r0, #16
 8001754:	f000 f8e1 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001758:	20c5      	movs	r0, #197	@ 0xc5
 800175a:	f000 f8d1 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800175e:	2045      	movs	r0, #69	@ 0x45
 8001760:	f000 f8db 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001764:	2015      	movs	r0, #21
 8001766:	f000 f8d8 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800176a:	20c7      	movs	r0, #199	@ 0xc7
 800176c:	f000 f8c8 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001770:	2090      	movs	r0, #144	@ 0x90
 8001772:	f000 f8d2 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001776:	2036      	movs	r0, #54	@ 0x36
 8001778:	f000 f8c2 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800177c:	20c8      	movs	r0, #200	@ 0xc8
 800177e:	f000 f8cc 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001782:	20f2      	movs	r0, #242	@ 0xf2
 8001784:	f000 f8bc 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001788:	2000      	movs	r0, #0
 800178a:	f000 f8c6 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800178e:	20b0      	movs	r0, #176	@ 0xb0
 8001790:	f000 f8b6 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001794:	20c2      	movs	r0, #194	@ 0xc2
 8001796:	f000 f8c0 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800179a:	20b6      	movs	r0, #182	@ 0xb6
 800179c:	f000 f8b0 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80017a0:	200a      	movs	r0, #10
 80017a2:	f000 f8ba 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80017a6:	20a7      	movs	r0, #167	@ 0xa7
 80017a8:	f000 f8b7 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80017ac:	2027      	movs	r0, #39	@ 0x27
 80017ae:	f000 f8b4 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80017b2:	2004      	movs	r0, #4
 80017b4:	f000 f8b1 	bl	800191a <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80017b8:	202a      	movs	r0, #42	@ 0x2a
 80017ba:	f000 f8a1 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80017be:	2000      	movs	r0, #0
 80017c0:	f000 f8ab 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80017c4:	2000      	movs	r0, #0
 80017c6:	f000 f8a8 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80017ca:	2000      	movs	r0, #0
 80017cc:	f000 f8a5 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80017d0:	20ef      	movs	r0, #239	@ 0xef
 80017d2:	f000 f8a2 	bl	800191a <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80017d6:	202b      	movs	r0, #43	@ 0x2b
 80017d8:	f000 f892 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80017dc:	2000      	movs	r0, #0
 80017de:	f000 f89c 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 f899 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80017e8:	2001      	movs	r0, #1
 80017ea:	f000 f896 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80017ee:	203f      	movs	r0, #63	@ 0x3f
 80017f0:	f000 f893 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80017f4:	20f6      	movs	r0, #246	@ 0xf6
 80017f6:	f000 f883 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f000 f88d 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001800:	2000      	movs	r0, #0
 8001802:	f000 f88a 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001806:	2006      	movs	r0, #6
 8001808:	f000 f887 	bl	800191a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 800180c:	202c      	movs	r0, #44	@ 0x2c
 800180e:	f000 f877 	bl	8001900 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001812:	20c8      	movs	r0, #200	@ 0xc8
 8001814:	f000 f9e8 	bl	8001be8 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001818:	2026      	movs	r0, #38	@ 0x26
 800181a:	f000 f871 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800181e:	2001      	movs	r0, #1
 8001820:	f000 f87b 	bl	800191a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001824:	20e0      	movs	r0, #224	@ 0xe0
 8001826:	f000 f86b 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800182a:	200f      	movs	r0, #15
 800182c:	f000 f875 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001830:	2029      	movs	r0, #41	@ 0x29
 8001832:	f000 f872 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001836:	2024      	movs	r0, #36	@ 0x24
 8001838:	f000 f86f 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800183c:	200c      	movs	r0, #12
 800183e:	f000 f86c 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001842:	200e      	movs	r0, #14
 8001844:	f000 f869 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001848:	2009      	movs	r0, #9
 800184a:	f000 f866 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800184e:	204e      	movs	r0, #78	@ 0x4e
 8001850:	f000 f863 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001854:	2078      	movs	r0, #120	@ 0x78
 8001856:	f000 f860 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800185a:	203c      	movs	r0, #60	@ 0x3c
 800185c:	f000 f85d 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001860:	2009      	movs	r0, #9
 8001862:	f000 f85a 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001866:	2013      	movs	r0, #19
 8001868:	f000 f857 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800186c:	2005      	movs	r0, #5
 800186e:	f000 f854 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001872:	2017      	movs	r0, #23
 8001874:	f000 f851 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001878:	2011      	movs	r0, #17
 800187a:	f000 f84e 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800187e:	2000      	movs	r0, #0
 8001880:	f000 f84b 	bl	800191a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001884:	20e1      	movs	r0, #225	@ 0xe1
 8001886:	f000 f83b 	bl	8001900 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800188a:	2000      	movs	r0, #0
 800188c:	f000 f845 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001890:	2016      	movs	r0, #22
 8001892:	f000 f842 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001896:	201b      	movs	r0, #27
 8001898:	f000 f83f 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800189c:	2004      	movs	r0, #4
 800189e:	f000 f83c 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80018a2:	2011      	movs	r0, #17
 80018a4:	f000 f839 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80018a8:	2007      	movs	r0, #7
 80018aa:	f000 f836 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80018ae:	2031      	movs	r0, #49	@ 0x31
 80018b0:	f000 f833 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80018b4:	2033      	movs	r0, #51	@ 0x33
 80018b6:	f000 f830 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80018ba:	2042      	movs	r0, #66	@ 0x42
 80018bc:	f000 f82d 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80018c0:	2005      	movs	r0, #5
 80018c2:	f000 f82a 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80018c6:	200c      	movs	r0, #12
 80018c8:	f000 f827 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80018cc:	200a      	movs	r0, #10
 80018ce:	f000 f824 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80018d2:	2028      	movs	r0, #40	@ 0x28
 80018d4:	f000 f821 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80018d8:	202f      	movs	r0, #47	@ 0x2f
 80018da:	f000 f81e 	bl	800191a <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80018de:	200f      	movs	r0, #15
 80018e0:	f000 f81b 	bl	800191a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80018e4:	2011      	movs	r0, #17
 80018e6:	f000 f80b 	bl	8001900 <ili9341_Write_Reg>
  LCD_Delay(200);
 80018ea:	20c8      	movs	r0, #200	@ 0xc8
 80018ec:	f000 f97c 	bl	8001be8 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80018f0:	2029      	movs	r0, #41	@ 0x29
 80018f2:	f000 f805 	bl	8001900 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80018f6:	202c      	movs	r0, #44	@ 0x2c
 80018f8:	f000 f802 	bl	8001900 <ili9341_Write_Reg>
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}

08001900 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	4618      	mov	r0, r3
 800190e:	f000 f949 	bl	8001ba4 <LCD_IO_WriteReg>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f91a 	bl	8001b60 <LCD_IO_WriteData>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001938:	4819      	ldr	r0, [pc, #100]	@ (80019a0 <SPI_Init+0x6c>)
 800193a:	f002 fbe9 	bl	8004110 <HAL_SPI_GetState>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d12b      	bne.n	800199c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001944:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <SPI_Init+0x6c>)
 8001946:	4a17      	ldr	r2, [pc, #92]	@ (80019a4 <SPI_Init+0x70>)
 8001948:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <SPI_Init+0x6c>)
 800194c:	2218      	movs	r2, #24
 800194e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001950:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <SPI_Init+0x6c>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001956:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <SPI_Init+0x6c>)
 8001958:	2200      	movs	r2, #0
 800195a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800195c:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <SPI_Init+0x6c>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001962:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <SPI_Init+0x6c>)
 8001964:	2200      	movs	r2, #0
 8001966:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001968:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <SPI_Init+0x6c>)
 800196a:	2207      	movs	r2, #7
 800196c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800196e:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <SPI_Init+0x6c>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001974:	4b0a      	ldr	r3, [pc, #40]	@ (80019a0 <SPI_Init+0x6c>)
 8001976:	2200      	movs	r2, #0
 8001978:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <SPI_Init+0x6c>)
 800197c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001980:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001982:	4b07      	ldr	r3, [pc, #28]	@ (80019a0 <SPI_Init+0x6c>)
 8001984:	2200      	movs	r2, #0
 8001986:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <SPI_Init+0x6c>)
 800198a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800198e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001990:	4803      	ldr	r0, [pc, #12]	@ (80019a0 <SPI_Init+0x6c>)
 8001992:	f000 f833 	bl	80019fc <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001996:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <SPI_Init+0x6c>)
 8001998:	f002 f9c5 	bl	8003d26 <HAL_SPI_Init>
  }
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20025bd8 	.word	0x20025bd8
 80019a4:	40015000 	.word	0x40015000

080019a8 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <SPI_Write+0x34>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	1db9      	adds	r1, r7, #6
 80019bc:	2201      	movs	r2, #1
 80019be:	4808      	ldr	r0, [pc, #32]	@ (80019e0 <SPI_Write+0x38>)
 80019c0:	f002 fa62 	bl	8003e88 <HAL_SPI_Transmit>
 80019c4:	4603      	mov	r3, r0
 80019c6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80019ce:	f000 f809 	bl	80019e4 <SPI_Error>
  }
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000018 	.word	0x20000018
 80019e0:	20025bd8 	.word	0x20025bd8

080019e4 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80019e8:	4803      	ldr	r0, [pc, #12]	@ (80019f8 <SPI_Error+0x14>)
 80019ea:	f002 fa25 	bl	8003e38 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80019ee:	f7ff ffa1 	bl	8001934 <SPI_Init>
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20025bd8 	.word	0x20025bd8

080019fc <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	@ 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <SPI_MspInit+0x6c>)
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0c:	4a16      	ldr	r2, [pc, #88]	@ (8001a68 <SPI_MspInit+0x6c>)
 8001a0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a12:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a14:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <SPI_MspInit+0x6c>)
 8001a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <SPI_MspInit+0x6c>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a28:	4a0f      	ldr	r2, [pc, #60]	@ (8001a68 <SPI_MspInit+0x6c>)
 8001a2a:	f043 0320 	orr.w	r3, r3, #32
 8001a2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a30:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <SPI_MspInit+0x6c>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a34:	f003 0320 	and.w	r3, r3, #32
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001a3c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001a4e:	2305      	movs	r3, #5
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	4804      	ldr	r0, [pc, #16]	@ (8001a6c <SPI_MspInit+0x70>)
 8001a5a:	f000 fd33 	bl	80024c4 <HAL_GPIO_Init>
}
 8001a5e:	bf00      	nop
 8001a60:	3728      	adds	r7, #40	@ 0x28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40021400 	.word	0x40021400

08001a70 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001a76:	4b36      	ldr	r3, [pc, #216]	@ (8001b50 <LCD_IO_Init+0xe0>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d164      	bne.n	8001b48 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001a7e:	4b34      	ldr	r3, [pc, #208]	@ (8001b50 <LCD_IO_Init+0xe0>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	4b32      	ldr	r3, [pc, #200]	@ (8001b54 <LCD_IO_Init+0xe4>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	4a31      	ldr	r2, [pc, #196]	@ (8001b54 <LCD_IO_Init+0xe4>)
 8001a8e:	f043 0308 	orr.w	r3, r3, #8
 8001a92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a94:	4b2f      	ldr	r3, [pc, #188]	@ (8001b54 <LCD_IO_Init+0xe4>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001aa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aa4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4827      	ldr	r0, [pc, #156]	@ (8001b58 <LCD_IO_Init+0xe8>)
 8001aba:	f000 fd03 	bl	80024c4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	4b24      	ldr	r3, [pc, #144]	@ (8001b54 <LCD_IO_Init+0xe4>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	4a23      	ldr	r2, [pc, #140]	@ (8001b54 <LCD_IO_Init+0xe4>)
 8001ac8:	f043 0308 	orr.w	r3, r3, #8
 8001acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ace:	4b21      	ldr	r3, [pc, #132]	@ (8001b54 <LCD_IO_Init+0xe4>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001ada:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ade:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	4619      	mov	r1, r3
 8001af2:	4819      	ldr	r0, [pc, #100]	@ (8001b58 <LCD_IO_Init+0xe8>)
 8001af4:	f000 fce6 	bl	80024c4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <LCD_IO_Init+0xe4>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b00:	4a14      	ldr	r2, [pc, #80]	@ (8001b54 <LCD_IO_Init+0xe4>)
 8001b02:	f043 0304 	orr.w	r3, r3, #4
 8001b06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b08:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <LCD_IO_Init+0xe4>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001b14:	2304      	movs	r3, #4
 8001b16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b20:	2302      	movs	r3, #2
 8001b22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480c      	ldr	r0, [pc, #48]	@ (8001b5c <LCD_IO_Init+0xec>)
 8001b2c:	f000 fcca 	bl	80024c4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001b30:	2200      	movs	r2, #0
 8001b32:	2104      	movs	r1, #4
 8001b34:	4809      	ldr	r0, [pc, #36]	@ (8001b5c <LCD_IO_Init+0xec>)
 8001b36:	f000 ff7d 	bl	8002a34 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2104      	movs	r1, #4
 8001b3e:	4807      	ldr	r0, [pc, #28]	@ (8001b5c <LCD_IO_Init+0xec>)
 8001b40:	f000 ff78 	bl	8002a34 <HAL_GPIO_WritePin>

    SPI_Init();
 8001b44:	f7ff fef6 	bl	8001934 <SPI_Init>
  }
}
 8001b48:	bf00      	nop
 8001b4a:	3720      	adds	r7, #32
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20025c30 	.word	0x20025c30
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020c00 	.word	0x40020c00
 8001b5c:	40020800 	.word	0x40020800

08001b60 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b70:	480a      	ldr	r0, [pc, #40]	@ (8001b9c <LCD_IO_WriteData+0x3c>)
 8001b72:	f000 ff5f 	bl	8002a34 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001b76:	2200      	movs	r2, #0
 8001b78:	2104      	movs	r1, #4
 8001b7a:	4809      	ldr	r0, [pc, #36]	@ (8001ba0 <LCD_IO_WriteData+0x40>)
 8001b7c:	f000 ff5a 	bl	8002a34 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ff10 	bl	80019a8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001b88:	2201      	movs	r2, #1
 8001b8a:	2104      	movs	r1, #4
 8001b8c:	4804      	ldr	r0, [pc, #16]	@ (8001ba0 <LCD_IO_WriteData+0x40>)
 8001b8e:	f000 ff51 	bl	8002a34 <HAL_GPIO_WritePin>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40020c00 	.word	0x40020c00
 8001ba0:	40020800 	.word	0x40020800

08001ba4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bb4:	480a      	ldr	r0, [pc, #40]	@ (8001be0 <LCD_IO_WriteReg+0x3c>)
 8001bb6:	f000 ff3d 	bl	8002a34 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	4809      	ldr	r0, [pc, #36]	@ (8001be4 <LCD_IO_WriteReg+0x40>)
 8001bc0:	f000 ff38 	bl	8002a34 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff feed 	bl	80019a8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	4804      	ldr	r0, [pc, #16]	@ (8001be4 <LCD_IO_WriteReg+0x40>)
 8001bd4:	f000 ff2e 	bl	8002a34 <HAL_GPIO_WritePin>
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40020c00 	.word	0x40020c00
 8001be4:	40020800 	.word	0x40020800

08001be8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fb5d 	bl	80022b0 <HAL_Delay>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c04:	f000 fae2 	bl	80021cc <HAL_Init>

	// The default system configuration function is "suspect" so we need to make our own clock configuration
	// Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
	SystemClockOverride();
 8001c08:	f000 f850 	bl	8001cac <SystemClockOverride>

	ApplicationInit(); // Initializes the LCD functionality
 8001c0c:	f7fe fc66 	bl	80004dc <ApplicationInit>
	//HAL_Delay(5000);

	//Game_Init();
	//Game_Run();

	HAL_Delay(100);
 8001c10:	2064      	movs	r0, #100	@ 0x64
 8001c12:	f000 fb4d 	bl	80022b0 <HAL_Delay>
	uint32_t eventsToRun;
	while(1) {
		eventsToRun = getScheduledEvents();
 8001c16:	f7ff fd1d 	bl	8001654 <getScheduledEvents>
 8001c1a:	6038      	str	r0, [r7, #0]
		if (eventsToRun & GAME_HOMESCREEN_EVENT) {
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <main+0x38>
			LCD_Menu_Screen();
 8001c26:	f7fe fc6e 	bl	8000506 <LCD_Menu_Screen>
			removeSchedulerEvent(GAME_HOMESCREEN_EVENT);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f7ff fcfe 	bl	800162c <removeSchedulerEvent>
			addSchedulerEvent(GAME_START_EVENT);
 8001c30:	2002      	movs	r0, #2
 8001c32:	f7ff fce9 	bl	8001608 <addSchedulerEvent>
		}

		if (eventsToRun & GAME_START_EVENT) {
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d026      	beq.n	8001c8e <main+0x90>
			Game_Init();
 8001c40:	f7fe fc68 	bl	8000514 <Game_Init>
			bool GameOver = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	71fb      	strb	r3, [r7, #7]

			while (!GameOver) {
 8001c48:	e015      	b.n	8001c76 <main+0x78>
				Game_NewBlock();
 8001c4a:	f7fe fc8d 	bl	8000568 <Game_NewBlock>
				GameOver = 1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	71fb      	strb	r3, [r7, #7]
				while (1) {
					if (!Game_MoveDown()) {
 8001c52:	f7fe fe73 	bl	800093c <Game_MoveDown>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f083 0301 	eor.w	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d106      	bne.n	8001c70 <main+0x72>
						break;
					}
					GameOver = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	71fb      	strb	r3, [r7, #7]
					HAL_Delay(500);
 8001c66:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c6a:	f000 fb21 	bl	80022b0 <HAL_Delay>
					if (!Game_MoveDown()) {
 8001c6e:	e7f0      	b.n	8001c52 <main+0x54>
						break;
 8001c70:	bf00      	nop

				}
				Game_Merge();
 8001c72:	f7fe fef7 	bl	8000a64 <Game_Merge>
			while (!GameOver) {
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f083 0301 	eor.w	r3, r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1e3      	bne.n	8001c4a <main+0x4c>
			}

			removeSchedulerEvent(GAME_START_EVENT);
 8001c82:	2002      	movs	r0, #2
 8001c84:	f7ff fcd2 	bl	800162c <removeSchedulerEvent>
			addSchedulerEvent(GAME_OVER_EVENT);
 8001c88:	2004      	movs	r0, #4
 8001c8a:	f7ff fcbd 	bl	8001608 <addSchedulerEvent>

		}

		if (eventsToRun & GAME_OVER_EVENT) {
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d004      	beq.n	8001ca2 <main+0xa4>
			LCD_Menu_Screen();
 8001c98:	f7fe fc35 	bl	8000506 <LCD_Menu_Screen>
			removeSchedulerEvent(GAME_OVER_EVENT);
 8001c9c:	2004      	movs	r0, #4
 8001c9e:	f7ff fcc5 	bl	800162c <removeSchedulerEvent>

		}
		HAL_Delay(100);
 8001ca2:	2064      	movs	r0, #100	@ 0x64
 8001ca4:	f000 fb04 	bl	80022b0 <HAL_Delay>
		eventsToRun = getScheduledEvents();
 8001ca8:	e7b5      	b.n	8001c16 <main+0x18>
	...

08001cac <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b092      	sub	sp, #72	@ 0x48
 8001cb0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	603b      	str	r3, [r7, #0]
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d28 <SystemClockOverride+0x7c>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	4a1b      	ldr	r2, [pc, #108]	@ (8001d28 <SystemClockOverride+0x7c>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc2:	4b19      	ldr	r3, [pc, #100]	@ (8001d28 <SystemClockOverride+0x7c>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cd6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cdc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ce0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ce6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cec:	2302      	movs	r3, #2
 8001cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cf0:	2307      	movs	r3, #7
 8001cf2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 f95c 	bl	8002fb4 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001cfc:	230f      	movs	r3, #15
 8001cfe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d00:	2302      	movs	r3, #2
 8001d02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d04:	2300      	movs	r3, #0
 8001d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d08:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d0c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d12:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001d14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d18:	2105      	movs	r1, #5
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f001 fbc2 	bl	80034a4 <HAL_RCC_ClockConfig>
}
 8001d20:	bf00      	nop
 8001d22:	3748      	adds	r7, #72	@ 0x48
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40023800 	.word	0x40023800

08001d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d30:	b672      	cpsid	i
}
 8001d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <Error_Handler+0x8>

08001d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	4b10      	ldr	r3, [pc, #64]	@ (8001d84 <HAL_MspInit+0x4c>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d46:	4a0f      	ldr	r2, [pc, #60]	@ (8001d84 <HAL_MspInit+0x4c>)
 8001d48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <HAL_MspInit+0x4c>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <HAL_MspInit+0x4c>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	4a08      	ldr	r2, [pc, #32]	@ (8001d84 <HAL_MspInit+0x4c>)
 8001d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d6a:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_MspInit+0x4c>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d72:	603b      	str	r3, [r7, #0]
 8001d74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d76:	2007      	movs	r0, #7
 8001d78:	f000 fb70 	bl	800245c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40023800 	.word	0x40023800

08001d88 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b09a      	sub	sp, #104	@ 0x68
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da4:	2230      	movs	r2, #48	@ 0x30
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f002 fa9b 	bl	80042e4 <memset>
  if(hltdc->Instance==LTDC)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a81      	ldr	r2, [pc, #516]	@ (8001fb8 <HAL_LTDC_MspInit+0x230>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	f040 80fa 	bne.w	8001fae <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001dba:	2308      	movs	r3, #8
 8001dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001dbe:	2332      	movs	r3, #50	@ 0x32
 8001dc0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 fd54 	bl	800387c <HAL_RCCEx_PeriphCLKConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001dda:	f7ff ffa7 	bl	8001d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
 8001de2:	4b76      	ldr	r3, [pc, #472]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	4a75      	ldr	r2, [pc, #468]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001de8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dee:	4b73      	ldr	r3, [pc, #460]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001df6:	623b      	str	r3, [r7, #32]
 8001df8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
 8001dfe:	4b6f      	ldr	r3, [pc, #444]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	4a6e      	ldr	r2, [pc, #440]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e04:	f043 0320 	orr.w	r3, r3, #32
 8001e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0a:	4b6c      	ldr	r3, [pc, #432]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f003 0320 	and.w	r3, r3, #32
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	4b68      	ldr	r3, [pc, #416]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	4a67      	ldr	r2, [pc, #412]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e26:	4b65      	ldr	r3, [pc, #404]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	4b61      	ldr	r3, [pc, #388]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	4a60      	ldr	r2, [pc, #384]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e42:	4b5e      	ldr	r3, [pc, #376]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	4b5a      	ldr	r3, [pc, #360]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	4a59      	ldr	r2, [pc, #356]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5e:	4b57      	ldr	r3, [pc, #348]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b53      	ldr	r3, [pc, #332]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	4a52      	ldr	r2, [pc, #328]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7a:	4b50      	ldr	r3, [pc, #320]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	4b4c      	ldr	r3, [pc, #304]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	4a4b      	ldr	r2, [pc, #300]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e90:	f043 0308 	orr.w	r3, r3, #8
 8001e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e96:	4b49      	ldr	r3, [pc, #292]	@ (8001fbc <HAL_LTDC_MspInit+0x234>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001ea2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ea6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eb4:	230e      	movs	r3, #14
 8001eb6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001eb8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4840      	ldr	r0, [pc, #256]	@ (8001fc0 <HAL_LTDC_MspInit+0x238>)
 8001ec0:	f000 fb00 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001ec4:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001ec8:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ed6:	230e      	movs	r3, #14
 8001ed8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eda:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4838      	ldr	r0, [pc, #224]	@ (8001fc4 <HAL_LTDC_MspInit+0x23c>)
 8001ee2:	f000 faef 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ef6:	2309      	movs	r3, #9
 8001ef8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001efe:	4619      	mov	r1, r3
 8001f00:	4831      	ldr	r0, [pc, #196]	@ (8001fc8 <HAL_LTDC_MspInit+0x240>)
 8001f02:	f000 fadf 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001f06:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001f0a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f18:	230e      	movs	r3, #14
 8001f1a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f20:	4619      	mov	r1, r3
 8001f22:	4829      	ldr	r0, [pc, #164]	@ (8001fc8 <HAL_LTDC_MspInit+0x240>)
 8001f24:	f000 face 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001f28:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001f2c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2300      	movs	r3, #0
 8001f38:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f3a:	230e      	movs	r3, #14
 8001f3c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f3e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f42:	4619      	mov	r1, r3
 8001f44:	4821      	ldr	r0, [pc, #132]	@ (8001fcc <HAL_LTDC_MspInit+0x244>)
 8001f46:	f000 fabd 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001f4a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001f4e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f5c:	230e      	movs	r3, #14
 8001f5e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f64:	4619      	mov	r1, r3
 8001f66:	481a      	ldr	r0, [pc, #104]	@ (8001fd0 <HAL_LTDC_MspInit+0x248>)
 8001f68:	f000 faac 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001f6c:	2348      	movs	r3, #72	@ 0x48
 8001f6e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f7c:	230e      	movs	r3, #14
 8001f7e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f80:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f84:	4619      	mov	r1, r3
 8001f86:	4813      	ldr	r0, [pc, #76]	@ (8001fd4 <HAL_LTDC_MspInit+0x24c>)
 8001f88:	f000 fa9c 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001f8c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f90:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f9e:	2309      	movs	r3, #9
 8001fa0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fa2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4808      	ldr	r0, [pc, #32]	@ (8001fcc <HAL_LTDC_MspInit+0x244>)
 8001faa:	f000 fa8b 	bl	80024c4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001fae:	bf00      	nop
 8001fb0:	3768      	adds	r7, #104	@ 0x68
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40016800 	.word	0x40016800
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40021400 	.word	0x40021400
 8001fc4:	40020000 	.word	0x40020000
 8001fc8:	40020400 	.word	0x40020400
 8001fcc:	40021800 	.word	0x40021800
 8001fd0:	40020800 	.word	0x40020800
 8001fd4:	40020c00 	.word	0x40020c00

08001fd8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8002014 <HAL_RNG_MspInit+0x3c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10d      	bne.n	8002006 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b0a      	ldr	r3, [pc, #40]	@ (8002018 <HAL_RNG_MspInit+0x40>)
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff2:	4a09      	ldr	r2, [pc, #36]	@ (8002018 <HAL_RNG_MspInit+0x40>)
 8001ff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ff8:	6353      	str	r3, [r2, #52]	@ 0x34
 8001ffa:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <HAL_RNG_MspInit+0x40>)
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	50060800 	.word	0x50060800
 8002018:	40023800 	.word	0x40023800

0800201c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	@ 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a19      	ldr	r2, [pc, #100]	@ (80020a0 <HAL_SPI_MspInit+0x84>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d12c      	bne.n	8002098 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	4b18      	ldr	r3, [pc, #96]	@ (80020a4 <HAL_SPI_MspInit+0x88>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	4a17      	ldr	r2, [pc, #92]	@ (80020a4 <HAL_SPI_MspInit+0x88>)
 8002048:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800204c:	6453      	str	r3, [r2, #68]	@ 0x44
 800204e:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <HAL_SPI_MspInit+0x88>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <HAL_SPI_MspInit+0x88>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	4a10      	ldr	r2, [pc, #64]	@ (80020a4 <HAL_SPI_MspInit+0x88>)
 8002064:	f043 0320 	orr.w	r3, r3, #32
 8002068:	6313      	str	r3, [r2, #48]	@ 0x30
 800206a:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <HAL_SPI_MspInit+0x88>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002076:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800207a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002088:	2305      	movs	r3, #5
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <HAL_SPI_MspInit+0x8c>)
 8002094:	f000 fa16 	bl	80024c4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002098:	bf00      	nop
 800209a:	3728      	adds	r7, #40	@ 0x28
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40015000 	.word	0x40015000
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40021400 	.word	0x40021400

080020ac <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a08      	ldr	r2, [pc, #32]	@ (80020dc <HAL_SPI_MspDeInit+0x30>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d10a      	bne.n	80020d4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80020be:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <HAL_SPI_MspDeInit+0x34>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	4a07      	ldr	r2, [pc, #28]	@ (80020e0 <HAL_SPI_MspDeInit+0x34>)
 80020c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80020c8:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80020ca:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80020ce:	4805      	ldr	r0, [pc, #20]	@ (80020e4 <HAL_SPI_MspDeInit+0x38>)
 80020d0:	f000 fba4 	bl	800281c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40015000 	.word	0x40015000
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40021400 	.word	0x40021400

080020e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <NMI_Handler+0x4>

080020f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <HardFault_Handler+0x4>

080020f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <MemManage_Handler+0x4>

08002100 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <BusFault_Handler+0x4>

08002108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800210c:	bf00      	nop
 800210e:	e7fd      	b.n	800210c <UsageFault_Handler+0x4>

08002110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800213e:	f000 f897 	bl	8002270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}

08002146 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <SystemInit+0x20>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215e:	4a05      	ldr	r2, [pc, #20]	@ (8002174 <SystemInit+0x20>)
 8002160:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002164:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002178:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800217c:	f7ff ffea 	bl	8002154 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002180:	480c      	ldr	r0, [pc, #48]	@ (80021b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002182:	490d      	ldr	r1, [pc, #52]	@ (80021b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002184:	4a0d      	ldr	r2, [pc, #52]	@ (80021bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a0a      	ldr	r2, [pc, #40]	@ (80021c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002198:	4c0a      	ldr	r4, [pc, #40]	@ (80021c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021a6:	f002 f8a5 	bl	80042f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021aa:	f7ff fd28 	bl	8001bfe <main>
  bx  lr    
 80021ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80021b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80021b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b8:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80021bc:	08005544 	.word	0x08005544
  ldr r2, =_sbss
 80021c0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80021c4:	20025c38 	.word	0x20025c38

080021c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC_IRQHandler>
	...

080021cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d0:	4b0e      	ldr	r3, [pc, #56]	@ (800220c <HAL_Init+0x40>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0d      	ldr	r2, [pc, #52]	@ (800220c <HAL_Init+0x40>)
 80021d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021dc:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <HAL_Init+0x40>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0a      	ldr	r2, [pc, #40]	@ (800220c <HAL_Init+0x40>)
 80021e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e8:	4b08      	ldr	r3, [pc, #32]	@ (800220c <HAL_Init+0x40>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a07      	ldr	r2, [pc, #28]	@ (800220c <HAL_Init+0x40>)
 80021ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f4:	2003      	movs	r0, #3
 80021f6:	f000 f931 	bl	800245c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fa:	2000      	movs	r0, #0
 80021fc:	f000 f808 	bl	8002210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002200:	f7ff fd9a 	bl	8001d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023c00 	.word	0x40023c00

08002210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002218:	4b12      	ldr	r3, [pc, #72]	@ (8002264 <HAL_InitTick+0x54>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <HAL_InitTick+0x58>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002226:	fbb3 f3f1 	udiv	r3, r3, r1
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	4618      	mov	r0, r3
 8002230:	f000 f93b 	bl	80024aa <HAL_SYSTICK_Config>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e00e      	b.n	800225c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b0f      	cmp	r3, #15
 8002242:	d80a      	bhi.n	800225a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002244:	2200      	movs	r2, #0
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	f04f 30ff 	mov.w	r0, #4294967295
 800224c:	f000 f911 	bl	8002472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002250:	4a06      	ldr	r2, [pc, #24]	@ (800226c <HAL_InitTick+0x5c>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e000      	b.n	800225c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	2000001c 	.word	0x2000001c
 8002268:	20000024 	.word	0x20000024
 800226c:	20000020 	.word	0x20000020

08002270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002274:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <HAL_IncTick+0x20>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <HAL_IncTick+0x24>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4413      	add	r3, r2
 8002280:	4a04      	ldr	r2, [pc, #16]	@ (8002294 <HAL_IncTick+0x24>)
 8002282:	6013      	str	r3, [r2, #0]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20000024 	.word	0x20000024
 8002294:	20025c34 	.word	0x20025c34

08002298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return uwTick;
 800229c:	4b03      	ldr	r3, [pc, #12]	@ (80022ac <HAL_GetTick+0x14>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20025c34 	.word	0x20025c34

080022b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff ffee 	bl	8002298 <HAL_GetTick>
 80022bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d005      	beq.n	80022d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ca:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <HAL_Delay+0x44>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022d6:	bf00      	nop
 80022d8:	f7ff ffde 	bl	8002298 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d8f7      	bhi.n	80022d8 <HAL_Delay+0x28>
  {
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000024 	.word	0x20000024

080022f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002308:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002314:	4013      	ands	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232a:	4a04      	ldr	r2, [pc, #16]	@ (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	60d3      	str	r3, [r2, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002344:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <__NVIC_GetPriorityGrouping+0x18>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	f003 0307 	and.w	r3, r3, #7
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	@ (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	@ (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	@ 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002428:	d301      	bcc.n	800242e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242a:	2301      	movs	r3, #1
 800242c:	e00f      	b.n	800244e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242e:	4a0a      	ldr	r2, [pc, #40]	@ (8002458 <SysTick_Config+0x40>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002436:	210f      	movs	r1, #15
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	f7ff ff8e 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002440:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <SysTick_Config+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002446:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <SysTick_Config+0x40>)
 8002448:	2207      	movs	r2, #7
 800244a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	e000e010 	.word	0xe000e010

0800245c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff47 	bl	80022f8 <__NVIC_SetPriorityGrouping>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002484:	f7ff ff5c 	bl	8002340 <__NVIC_GetPriorityGrouping>
 8002488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f7ff ff8e 	bl	80023b0 <NVIC_EncodePriority>
 8002494:	4602      	mov	r2, r0
 8002496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff5d 	bl	800235c <__NVIC_SetPriority>
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ffb0 	bl	8002418 <SysTick_Config>
 80024b8:	4603      	mov	r3, r0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	@ 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	e177      	b.n	80027d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024e0:	2201      	movs	r2, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	f040 8166 	bne.w	80027ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d005      	beq.n	8002516 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002512:	2b02      	cmp	r3, #2
 8002514:	d130      	bne.n	8002578 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800254c:	2201      	movs	r2, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 0201 	and.w	r2, r3, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b03      	cmp	r3, #3
 8002582:	d017      	beq.n	80025b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d123      	bne.n	8002608 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	08da      	lsrs	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3208      	adds	r2, #8
 80025c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	220f      	movs	r2, #15
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	08da      	lsrs	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3208      	adds	r2, #8
 8002602:	69b9      	ldr	r1, [r7, #24]
 8002604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	2203      	movs	r2, #3
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0203 	and.w	r2, r3, #3
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80c0 	beq.w	80027ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4b66      	ldr	r3, [pc, #408]	@ (80027e8 <HAL_GPIO_Init+0x324>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	4a65      	ldr	r2, [pc, #404]	@ (80027e8 <HAL_GPIO_Init+0x324>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002658:	6453      	str	r3, [r2, #68]	@ 0x44
 800265a:	4b63      	ldr	r3, [pc, #396]	@ (80027e8 <HAL_GPIO_Init+0x324>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002666:	4a61      	ldr	r2, [pc, #388]	@ (80027ec <HAL_GPIO_Init+0x328>)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a58      	ldr	r2, [pc, #352]	@ (80027f0 <HAL_GPIO_Init+0x32c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d037      	beq.n	8002702 <HAL_GPIO_Init+0x23e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a57      	ldr	r2, [pc, #348]	@ (80027f4 <HAL_GPIO_Init+0x330>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d031      	beq.n	80026fe <HAL_GPIO_Init+0x23a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a56      	ldr	r2, [pc, #344]	@ (80027f8 <HAL_GPIO_Init+0x334>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02b      	beq.n	80026fa <HAL_GPIO_Init+0x236>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a55      	ldr	r2, [pc, #340]	@ (80027fc <HAL_GPIO_Init+0x338>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d025      	beq.n	80026f6 <HAL_GPIO_Init+0x232>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a54      	ldr	r2, [pc, #336]	@ (8002800 <HAL_GPIO_Init+0x33c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <HAL_GPIO_Init+0x22e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a53      	ldr	r2, [pc, #332]	@ (8002804 <HAL_GPIO_Init+0x340>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x22a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a52      	ldr	r2, [pc, #328]	@ (8002808 <HAL_GPIO_Init+0x344>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x226>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a51      	ldr	r2, [pc, #324]	@ (800280c <HAL_GPIO_Init+0x348>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x222>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a50      	ldr	r2, [pc, #320]	@ (8002810 <HAL_GPIO_Init+0x34c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x21e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4f      	ldr	r2, [pc, #316]	@ (8002814 <HAL_GPIO_Init+0x350>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x21a>
 80026da:	2309      	movs	r3, #9
 80026dc:	e012      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026de:	230a      	movs	r3, #10
 80026e0:	e010      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e2:	2308      	movs	r3, #8
 80026e4:	e00e      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e6:	2307      	movs	r3, #7
 80026e8:	e00c      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ea:	2306      	movs	r3, #6
 80026ec:	e00a      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e008      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e004      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_GPIO_Init+0x240>
 8002702:	2300      	movs	r3, #0
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f002 0203 	and.w	r2, r2, #3
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	4093      	lsls	r3, r2
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002714:	4935      	ldr	r1, [pc, #212]	@ (80027ec <HAL_GPIO_Init+0x328>)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002722:	4b3d      	ldr	r3, [pc, #244]	@ (8002818 <HAL_GPIO_Init+0x354>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002746:	4a34      	ldr	r2, [pc, #208]	@ (8002818 <HAL_GPIO_Init+0x354>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800274c:	4b32      	ldr	r3, [pc, #200]	@ (8002818 <HAL_GPIO_Init+0x354>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002770:	4a29      	ldr	r2, [pc, #164]	@ (8002818 <HAL_GPIO_Init+0x354>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002776:	4b28      	ldr	r3, [pc, #160]	@ (8002818 <HAL_GPIO_Init+0x354>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800279a:	4a1f      	ldr	r2, [pc, #124]	@ (8002818 <HAL_GPIO_Init+0x354>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002818 <HAL_GPIO_Init+0x354>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c4:	4a14      	ldr	r2, [pc, #80]	@ (8002818 <HAL_GPIO_Init+0x354>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3301      	adds	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	f67f ae84 	bls.w	80024e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	3724      	adds	r7, #36	@ 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40020000 	.word	0x40020000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	40020800 	.word	0x40020800
 80027fc:	40020c00 	.word	0x40020c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40021400 	.word	0x40021400
 8002808:	40021800 	.word	0x40021800
 800280c:	40021c00 	.word	0x40021c00
 8002810:	40022000 	.word	0x40022000
 8002814:	40022400 	.word	0x40022400
 8002818:	40013c00 	.word	0x40013c00

0800281c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e0d9      	b.n	80029ec <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002838:	2201      	movs	r2, #1
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4013      	ands	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	429a      	cmp	r2, r3
 8002850:	f040 80c9 	bne.w	80029e6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002854:	4a6b      	ldr	r2, [pc, #428]	@ (8002a04 <HAL_GPIO_DeInit+0x1e8>)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	3302      	adds	r3, #2
 800285c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002860:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	220f      	movs	r2, #15
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	4013      	ands	r3, r2
 8002874:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a63      	ldr	r2, [pc, #396]	@ (8002a08 <HAL_GPIO_DeInit+0x1ec>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d037      	beq.n	80028ee <HAL_GPIO_DeInit+0xd2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a62      	ldr	r2, [pc, #392]	@ (8002a0c <HAL_GPIO_DeInit+0x1f0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d031      	beq.n	80028ea <HAL_GPIO_DeInit+0xce>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a61      	ldr	r2, [pc, #388]	@ (8002a10 <HAL_GPIO_DeInit+0x1f4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d02b      	beq.n	80028e6 <HAL_GPIO_DeInit+0xca>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a60      	ldr	r2, [pc, #384]	@ (8002a14 <HAL_GPIO_DeInit+0x1f8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d025      	beq.n	80028e2 <HAL_GPIO_DeInit+0xc6>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a5f      	ldr	r2, [pc, #380]	@ (8002a18 <HAL_GPIO_DeInit+0x1fc>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01f      	beq.n	80028de <HAL_GPIO_DeInit+0xc2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a5e      	ldr	r2, [pc, #376]	@ (8002a1c <HAL_GPIO_DeInit+0x200>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d019      	beq.n	80028da <HAL_GPIO_DeInit+0xbe>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a5d      	ldr	r2, [pc, #372]	@ (8002a20 <HAL_GPIO_DeInit+0x204>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_GPIO_DeInit+0xba>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a5c      	ldr	r2, [pc, #368]	@ (8002a24 <HAL_GPIO_DeInit+0x208>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00d      	beq.n	80028d2 <HAL_GPIO_DeInit+0xb6>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a5b      	ldr	r2, [pc, #364]	@ (8002a28 <HAL_GPIO_DeInit+0x20c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <HAL_GPIO_DeInit+0xb2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a5a      	ldr	r2, [pc, #360]	@ (8002a2c <HAL_GPIO_DeInit+0x210>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d101      	bne.n	80028ca <HAL_GPIO_DeInit+0xae>
 80028c6:	2309      	movs	r3, #9
 80028c8:	e012      	b.n	80028f0 <HAL_GPIO_DeInit+0xd4>
 80028ca:	230a      	movs	r3, #10
 80028cc:	e010      	b.n	80028f0 <HAL_GPIO_DeInit+0xd4>
 80028ce:	2308      	movs	r3, #8
 80028d0:	e00e      	b.n	80028f0 <HAL_GPIO_DeInit+0xd4>
 80028d2:	2307      	movs	r3, #7
 80028d4:	e00c      	b.n	80028f0 <HAL_GPIO_DeInit+0xd4>
 80028d6:	2306      	movs	r3, #6
 80028d8:	e00a      	b.n	80028f0 <HAL_GPIO_DeInit+0xd4>
 80028da:	2305      	movs	r3, #5
 80028dc:	e008      	b.n	80028f0 <HAL_GPIO_DeInit+0xd4>
 80028de:	2304      	movs	r3, #4
 80028e0:	e006      	b.n	80028f0 <HAL_GPIO_DeInit+0xd4>
 80028e2:	2303      	movs	r3, #3
 80028e4:	e004      	b.n	80028f0 <HAL_GPIO_DeInit+0xd4>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e002      	b.n	80028f0 <HAL_GPIO_DeInit+0xd4>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_GPIO_DeInit+0xd4>
 80028ee:	2300      	movs	r3, #0
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	f002 0203 	and.w	r2, r2, #3
 80028f6:	0092      	lsls	r2, r2, #2
 80028f8:	4093      	lsls	r3, r2
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d132      	bne.n	8002966 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002900:	4b4b      	ldr	r3, [pc, #300]	@ (8002a30 <HAL_GPIO_DeInit+0x214>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	43db      	mvns	r3, r3
 8002908:	4949      	ldr	r1, [pc, #292]	@ (8002a30 <HAL_GPIO_DeInit+0x214>)
 800290a:	4013      	ands	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800290e:	4b48      	ldr	r3, [pc, #288]	@ (8002a30 <HAL_GPIO_DeInit+0x214>)
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	43db      	mvns	r3, r3
 8002916:	4946      	ldr	r1, [pc, #280]	@ (8002a30 <HAL_GPIO_DeInit+0x214>)
 8002918:	4013      	ands	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800291c:	4b44      	ldr	r3, [pc, #272]	@ (8002a30 <HAL_GPIO_DeInit+0x214>)
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	43db      	mvns	r3, r3
 8002924:	4942      	ldr	r1, [pc, #264]	@ (8002a30 <HAL_GPIO_DeInit+0x214>)
 8002926:	4013      	ands	r3, r2
 8002928:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800292a:	4b41      	ldr	r3, [pc, #260]	@ (8002a30 <HAL_GPIO_DeInit+0x214>)
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	43db      	mvns	r3, r3
 8002932:	493f      	ldr	r1, [pc, #252]	@ (8002a30 <HAL_GPIO_DeInit+0x214>)
 8002934:	4013      	ands	r3, r2
 8002936:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	220f      	movs	r2, #15
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002948:	4a2e      	ldr	r2, [pc, #184]	@ (8002a04 <HAL_GPIO_DeInit+0x1e8>)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	089b      	lsrs	r3, r3, #2
 800294e:	3302      	adds	r3, #2
 8002950:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	43da      	mvns	r2, r3
 8002958:	482a      	ldr	r0, [pc, #168]	@ (8002a04 <HAL_GPIO_DeInit+0x1e8>)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	400a      	ands	r2, r1
 8002960:	3302      	adds	r3, #2
 8002962:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2103      	movs	r1, #3
 8002970:	fa01 f303 	lsl.w	r3, r1, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	401a      	ands	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	08da      	lsrs	r2, r3, #3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3208      	adds	r2, #8
 8002984:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	220f      	movs	r2, #15
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	08d2      	lsrs	r2, r2, #3
 800299c:	4019      	ands	r1, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3208      	adds	r2, #8
 80029a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2103      	movs	r1, #3
 80029b0:	fa01 f303 	lsl.w	r3, r1, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	401a      	ands	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	2101      	movs	r1, #1
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	401a      	ands	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	2103      	movs	r1, #3
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	401a      	ands	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	3301      	adds	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b0f      	cmp	r3, #15
 80029f0:	f67f af22 	bls.w	8002838 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40013800 	.word	0x40013800
 8002a08:	40020000 	.word	0x40020000
 8002a0c:	40020400 	.word	0x40020400
 8002a10:	40020800 	.word	0x40020800
 8002a14:	40020c00 	.word	0x40020c00
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40021400 	.word	0x40021400
 8002a20:	40021800 	.word	0x40021800
 8002a24:	40021c00 	.word	0x40021c00
 8002a28:	40022000 	.word	0x40022000
 8002a2c:	40022400 	.word	0x40022400
 8002a30:	40013c00 	.word	0x40013c00

08002a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
 8002a40:	4613      	mov	r3, r2
 8002a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a44:	787b      	ldrb	r3, [r7, #1]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a4a:	887a      	ldrh	r2, [r7, #2]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a50:	e003      	b.n	8002a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a52:	887b      	ldrh	r3, [r7, #2]
 8002a54:	041a      	lsls	r2, r3, #16
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	619a      	str	r2, [r3, #24]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e0bf      	b.n	8002bfa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff f97a 	bl	8001d88 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002aaa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6999      	ldr	r1, [r3, #24]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ac0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6899      	ldr	r1, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b4a      	ldr	r3, [pc, #296]	@ (8002c04 <HAL_LTDC_Init+0x19c>)
 8002adc:	400b      	ands	r3, r1
 8002ade:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	041b      	lsls	r3, r3, #16
 8002ae6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6899      	ldr	r1, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68d9      	ldr	r1, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b3e      	ldr	r3, [pc, #248]	@ (8002c04 <HAL_LTDC_Init+0x19c>)
 8002b0a:	400b      	ands	r3, r1
 8002b0c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68d9      	ldr	r1, [r3, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1a      	ldr	r2, [r3, #32]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6919      	ldr	r1, [r3, #16]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b33      	ldr	r3, [pc, #204]	@ (8002c04 <HAL_LTDC_Init+0x19c>)
 8002b38:	400b      	ands	r3, r1
 8002b3a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	041b      	lsls	r3, r3, #16
 8002b42:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6919      	ldr	r1, [r3, #16]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6959      	ldr	r1, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b27      	ldr	r3, [pc, #156]	@ (8002c04 <HAL_LTDC_Init+0x19c>)
 8002b66:	400b      	ands	r3, r1
 8002b68:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6e:	041b      	lsls	r3, r3, #16
 8002b70:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6959      	ldr	r1, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002b98:	041b      	lsls	r3, r3, #16
 8002b9a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002baa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0206 	orr.w	r2, r2, #6
 8002bd6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	f000f800 	.word	0xf000f800

08002c08 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002c08:	b5b0      	push	{r4, r5, r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_LTDC_ConfigLayer+0x1a>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e02c      	b.n	8002c7c <HAL_LTDC_ConfigLayer+0x74>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2134      	movs	r1, #52	@ 0x34
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4614      	mov	r4, r2
 8002c46:	461d      	mov	r5, r3
 8002c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c54:	682b      	ldr	r3, [r5, #0]
 8002c56:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f811 	bl	8002c84 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2201      	movs	r2, #1
 8002c68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bdb0      	pop	{r4, r5, r7, pc}

08002c84 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	@ 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	0c1b      	lsrs	r3, r3, #16
 8002c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca0:	4413      	add	r3, r2
 8002ca2:	041b      	lsls	r3, r3, #16
 8002ca4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	01db      	lsls	r3, r3, #7
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3384      	adds	r3, #132	@ 0x84
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	01d2      	lsls	r2, r2, #7
 8002cc0:	440a      	add	r2, r1
 8002cc2:	3284      	adds	r2, #132	@ 0x84
 8002cc4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002cc8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002cda:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002cdc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	01db      	lsls	r3, r3, #7
 8002ce8:	440b      	add	r3, r1
 8002cea:	3384      	adds	r3, #132	@ 0x84
 8002cec:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002cf2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d02:	4413      	add	r3, r2
 8002d04:	041b      	lsls	r3, r3, #16
 8002d06:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	01db      	lsls	r3, r3, #7
 8002d12:	4413      	add	r3, r2
 8002d14:	3384      	adds	r3, #132	@ 0x84
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	01d2      	lsls	r2, r2, #7
 8002d22:	440a      	add	r2, r1
 8002d24:	3284      	adds	r2, #132	@ 0x84
 8002d26:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002d2a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d3a:	4413      	add	r3, r2
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4619      	mov	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	01db      	lsls	r3, r3, #7
 8002d48:	440b      	add	r3, r1
 8002d4a:	3384      	adds	r3, #132	@ 0x84
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	01db      	lsls	r3, r3, #7
 8002d5e:	4413      	add	r3, r2
 8002d60:	3384      	adds	r3, #132	@ 0x84
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	4611      	mov	r1, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	01d2      	lsls	r2, r2, #7
 8002d6e:	440a      	add	r2, r1
 8002d70:	3284      	adds	r2, #132	@ 0x84
 8002d72:	f023 0307 	bic.w	r3, r3, #7
 8002d76:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	01db      	lsls	r3, r3, #7
 8002d82:	4413      	add	r3, r2
 8002d84:	3384      	adds	r3, #132	@ 0x84
 8002d86:	461a      	mov	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002d94:	021b      	lsls	r3, r3, #8
 8002d96:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002d9e:	041b      	lsls	r3, r3, #16
 8002da0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	061b      	lsls	r3, r3, #24
 8002da8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	01db      	lsls	r3, r3, #7
 8002db4:	4413      	add	r3, r2
 8002db6:	3384      	adds	r3, #132	@ 0x84
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	01db      	lsls	r3, r3, #7
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3384      	adds	r3, #132	@ 0x84
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2300      	movs	r3, #0
 8002dcc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4619      	mov	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	01db      	lsls	r3, r3, #7
 8002de8:	440b      	add	r3, r1
 8002dea:	3384      	adds	r3, #132	@ 0x84
 8002dec:	4619      	mov	r1, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	01db      	lsls	r3, r3, #7
 8002dfe:	4413      	add	r3, r2
 8002e00:	3384      	adds	r3, #132	@ 0x84
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	4611      	mov	r1, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	01d2      	lsls	r2, r2, #7
 8002e0e:	440a      	add	r2, r1
 8002e10:	3284      	adds	r2, #132	@ 0x84
 8002e12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e16:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	01db      	lsls	r3, r3, #7
 8002e22:	4413      	add	r3, r2
 8002e24:	3384      	adds	r3, #132	@ 0x84
 8002e26:	461a      	mov	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	01db      	lsls	r3, r3, #7
 8002e38:	4413      	add	r3, r2
 8002e3a:	3384      	adds	r3, #132	@ 0x84
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	4611      	mov	r1, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	01d2      	lsls	r2, r2, #7
 8002e48:	440a      	add	r2, r1
 8002e4a:	3284      	adds	r2, #132	@ 0x84
 8002e4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e50:	f023 0307 	bic.w	r3, r3, #7
 8002e54:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	69da      	ldr	r2, [r3, #28]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	68f9      	ldr	r1, [r7, #12]
 8002e60:	6809      	ldr	r1, [r1, #0]
 8002e62:	4608      	mov	r0, r1
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	01c9      	lsls	r1, r1, #7
 8002e68:	4401      	add	r1, r0
 8002e6a:	3184      	adds	r1, #132	@ 0x84
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	01db      	lsls	r3, r3, #7
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3384      	adds	r3, #132	@ 0x84
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	01db      	lsls	r3, r3, #7
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3384      	adds	r3, #132	@ 0x84
 8002e8e:	461a      	mov	r2, r3
 8002e90:	2300      	movs	r3, #0
 8002e92:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	01db      	lsls	r3, r3, #7
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3384      	adds	r3, #132	@ 0x84
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d102      	bne.n	8002eb8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	e01b      	b.n	8002ef0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d102      	bne.n	8002ec6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	61fb      	str	r3, [r7, #28]
 8002ec4:	e014      	b.n	8002ef0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d00b      	beq.n	8002ee6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d007      	beq.n	8002ee6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d003      	beq.n	8002ee6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002ee2:	2b07      	cmp	r3, #7
 8002ee4:	d102      	bne.n	8002eec <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	e001      	b.n	8002ef0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002eec:	2301      	movs	r3, #1
 8002eee:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	01db      	lsls	r3, r3, #7
 8002efa:	4413      	add	r3, r2
 8002efc:	3384      	adds	r3, #132	@ 0x84
 8002efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	4611      	mov	r1, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	01d2      	lsls	r2, r2, #7
 8002f0a:	440a      	add	r2, r1
 8002f0c:	3284      	adds	r2, #132	@ 0x84
 8002f0e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002f12:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	1acb      	subs	r3, r1, r3
 8002f2a:	69f9      	ldr	r1, [r7, #28]
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002f32:	68f9      	ldr	r1, [r7, #12]
 8002f34:	6809      	ldr	r1, [r1, #0]
 8002f36:	4608      	mov	r0, r1
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	01c9      	lsls	r1, r1, #7
 8002f3c:	4401      	add	r1, r0
 8002f3e:	3184      	adds	r1, #132	@ 0x84
 8002f40:	4313      	orrs	r3, r2
 8002f42:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	01db      	lsls	r3, r3, #7
 8002f4e:	4413      	add	r3, r2
 8002f50:	3384      	adds	r3, #132	@ 0x84
 8002f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	4611      	mov	r1, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	01d2      	lsls	r2, r2, #7
 8002f5e:	440a      	add	r2, r1
 8002f60:	3284      	adds	r2, #132	@ 0x84
 8002f62:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002f66:	f023 0307 	bic.w	r3, r3, #7
 8002f6a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	01db      	lsls	r3, r3, #7
 8002f76:	4413      	add	r3, r2
 8002f78:	3384      	adds	r3, #132	@ 0x84
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f80:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	01db      	lsls	r3, r3, #7
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3384      	adds	r3, #132	@ 0x84
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	4611      	mov	r1, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	01d2      	lsls	r2, r2, #7
 8002f9c:	440a      	add	r2, r1
 8002f9e:	3284      	adds	r2, #132	@ 0x84
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6013      	str	r3, [r2, #0]
}
 8002fa6:	bf00      	nop
 8002fa8:	3724      	adds	r7, #36	@ 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e267      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d075      	beq.n	80030be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002fd2:	4b88      	ldr	r3, [pc, #544]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d00c      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fde:	4b85      	ldr	r3, [pc, #532]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d112      	bne.n	8003010 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fea:	4b82      	ldr	r3, [pc, #520]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ff2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ff6:	d10b      	bne.n	8003010 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	4b7e      	ldr	r3, [pc, #504]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d05b      	beq.n	80030bc <HAL_RCC_OscConfig+0x108>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d157      	bne.n	80030bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e242      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003018:	d106      	bne.n	8003028 <HAL_RCC_OscConfig+0x74>
 800301a:	4b76      	ldr	r3, [pc, #472]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a75      	ldr	r2, [pc, #468]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e01d      	b.n	8003064 <HAL_RCC_OscConfig+0xb0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003030:	d10c      	bne.n	800304c <HAL_RCC_OscConfig+0x98>
 8003032:	4b70      	ldr	r3, [pc, #448]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a6f      	ldr	r2, [pc, #444]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4b6d      	ldr	r3, [pc, #436]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a6c      	ldr	r2, [pc, #432]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e00b      	b.n	8003064 <HAL_RCC_OscConfig+0xb0>
 800304c:	4b69      	ldr	r3, [pc, #420]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a68      	ldr	r2, [pc, #416]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	4b66      	ldr	r3, [pc, #408]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a65      	ldr	r2, [pc, #404]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 800305e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d013      	beq.n	8003094 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7ff f914 	bl	8002298 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003074:	f7ff f910 	bl	8002298 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	@ 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e207      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	4b5b      	ldr	r3, [pc, #364]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0xc0>
 8003092:	e014      	b.n	80030be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7ff f900 	bl	8002298 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800309c:	f7ff f8fc 	bl	8002298 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	@ 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e1f3      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ae:	4b51      	ldr	r3, [pc, #324]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0xe8>
 80030ba:	e000      	b.n	80030be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d063      	beq.n	8003192 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030ca:	4b4a      	ldr	r3, [pc, #296]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d6:	4b47      	ldr	r3, [pc, #284]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d11c      	bne.n	800311c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030e2:	4b44      	ldr	r3, [pc, #272]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d116      	bne.n	800311c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ee:	4b41      	ldr	r3, [pc, #260]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <HAL_RCC_OscConfig+0x152>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d001      	beq.n	8003106 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e1c7      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003106:	4b3b      	ldr	r3, [pc, #236]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4937      	ldr	r1, [pc, #220]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311a:	e03a      	b.n	8003192 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003124:	4b34      	ldr	r3, [pc, #208]	@ (80031f8 <HAL_RCC_OscConfig+0x244>)
 8003126:	2201      	movs	r2, #1
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312a:	f7ff f8b5 	bl	8002298 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003132:	f7ff f8b1 	bl	8002298 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e1a8      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003144:	4b2b      	ldr	r3, [pc, #172]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003150:	4b28      	ldr	r3, [pc, #160]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4925      	ldr	r1, [pc, #148]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003160:	4313      	orrs	r3, r2
 8003162:	600b      	str	r3, [r1, #0]
 8003164:	e015      	b.n	8003192 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003166:	4b24      	ldr	r3, [pc, #144]	@ (80031f8 <HAL_RCC_OscConfig+0x244>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7ff f894 	bl	8002298 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003174:	f7ff f890 	bl	8002298 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e187      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003186:	4b1b      	ldr	r3, [pc, #108]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d036      	beq.n	800320c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d016      	beq.n	80031d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a6:	4b15      	ldr	r3, [pc, #84]	@ (80031fc <HAL_RCC_OscConfig+0x248>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7ff f874 	bl	8002298 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b4:	f7ff f870 	bl	8002298 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e167      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c6:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <HAL_RCC_OscConfig+0x240>)
 80031c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0x200>
 80031d2:	e01b      	b.n	800320c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031d4:	4b09      	ldr	r3, [pc, #36]	@ (80031fc <HAL_RCC_OscConfig+0x248>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031da:	f7ff f85d 	bl	8002298 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e0:	e00e      	b.n	8003200 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e2:	f7ff f859 	bl	8002298 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d907      	bls.n	8003200 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e150      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
 80031f4:	40023800 	.word	0x40023800
 80031f8:	42470000 	.word	0x42470000
 80031fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003200:	4b88      	ldr	r3, [pc, #544]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 8003202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1ea      	bne.n	80031e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8097 	beq.w	8003348 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800321a:	2300      	movs	r3, #0
 800321c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321e:	4b81      	ldr	r3, [pc, #516]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10f      	bne.n	800324a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	4b7d      	ldr	r3, [pc, #500]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	4a7c      	ldr	r2, [pc, #496]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	@ 0x40
 800323a:	4b7a      	ldr	r3, [pc, #488]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324a:	4b77      	ldr	r3, [pc, #476]	@ (8003428 <HAL_RCC_OscConfig+0x474>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d118      	bne.n	8003288 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003256:	4b74      	ldr	r3, [pc, #464]	@ (8003428 <HAL_RCC_OscConfig+0x474>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a73      	ldr	r2, [pc, #460]	@ (8003428 <HAL_RCC_OscConfig+0x474>)
 800325c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003262:	f7ff f819 	bl	8002298 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326a:	f7ff f815 	bl	8002298 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e10c      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	4b6a      	ldr	r3, [pc, #424]	@ (8003428 <HAL_RCC_OscConfig+0x474>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x2ea>
 8003290:	4b64      	ldr	r3, [pc, #400]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003294:	4a63      	ldr	r2, [pc, #396]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6713      	str	r3, [r2, #112]	@ 0x70
 800329c:	e01c      	b.n	80032d8 <HAL_RCC_OscConfig+0x324>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x30c>
 80032a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032aa:	4a5e      	ldr	r2, [pc, #376]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032be:	e00b      	b.n	80032d8 <HAL_RCC_OscConfig+0x324>
 80032c0:	4b58      	ldr	r3, [pc, #352]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c4:	4a57      	ldr	r2, [pc, #348]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 80032c6:	f023 0301 	bic.w	r3, r3, #1
 80032ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80032cc:	4b55      	ldr	r3, [pc, #340]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d0:	4a54      	ldr	r2, [pc, #336]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 80032d2:	f023 0304 	bic.w	r3, r3, #4
 80032d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d015      	beq.n	800330c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fe ffda 	bl	8002298 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fe ffd6 	bl	8002298 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e0cb      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fe:	4b49      	ldr	r3, [pc, #292]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ee      	beq.n	80032e8 <HAL_RCC_OscConfig+0x334>
 800330a:	e014      	b.n	8003336 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330c:	f7fe ffc4 	bl	8002298 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003312:	e00a      	b.n	800332a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7fe ffc0 	bl	8002298 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e0b5      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332a:	4b3e      	ldr	r3, [pc, #248]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1ee      	bne.n	8003314 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333c:	4b39      	ldr	r3, [pc, #228]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	4a38      	ldr	r2, [pc, #224]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 8003342:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003346:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80a1 	beq.w	8003494 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003352:	4b34      	ldr	r3, [pc, #208]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	2b08      	cmp	r3, #8
 800335c:	d05c      	beq.n	8003418 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d141      	bne.n	80033ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003366:	4b31      	ldr	r3, [pc, #196]	@ (800342c <HAL_RCC_OscConfig+0x478>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fe ff94 	bl	8002298 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003374:	f7fe ff90 	bl	8002298 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e087      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	4b27      	ldr	r3, [pc, #156]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	019b      	lsls	r3, r3, #6
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	3b01      	subs	r3, #1
 80033ac:	041b      	lsls	r3, r3, #16
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	061b      	lsls	r3, r3, #24
 80033b6:	491b      	ldr	r1, [pc, #108]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033bc:	4b1b      	ldr	r3, [pc, #108]	@ (800342c <HAL_RCC_OscConfig+0x478>)
 80033be:	2201      	movs	r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c2:	f7fe ff69 	bl	8002298 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ca:	f7fe ff65 	bl	8002298 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e05c      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033dc:	4b11      	ldr	r3, [pc, #68]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x416>
 80033e8:	e054      	b.n	8003494 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ea:	4b10      	ldr	r3, [pc, #64]	@ (800342c <HAL_RCC_OscConfig+0x478>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fe ff52 	bl	8002298 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fe ff4e 	bl	8002298 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e045      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	4b06      	ldr	r3, [pc, #24]	@ (8003424 <HAL_RCC_OscConfig+0x470>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x444>
 8003416:	e03d      	b.n	8003494 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d107      	bne.n	8003430 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e038      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
 8003424:	40023800 	.word	0x40023800
 8003428:	40007000 	.word	0x40007000
 800342c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003430:	4b1b      	ldr	r3, [pc, #108]	@ (80034a0 <HAL_RCC_OscConfig+0x4ec>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d028      	beq.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d121      	bne.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d11a      	bne.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003460:	4013      	ands	r3, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003466:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003468:	4293      	cmp	r3, r2
 800346a:	d111      	bne.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003476:	085b      	lsrs	r3, r3, #1
 8003478:	3b01      	subs	r3, #1
 800347a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d107      	bne.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800

080034a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0cc      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b8:	4b68      	ldr	r3, [pc, #416]	@ (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d90c      	bls.n	80034e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	4b65      	ldr	r3, [pc, #404]	@ (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b63      	ldr	r3, [pc, #396]	@ (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0b8      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d020      	beq.n	800352e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f8:	4b59      	ldr	r3, [pc, #356]	@ (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	4a58      	ldr	r2, [pc, #352]	@ (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003502:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003510:	4b53      	ldr	r3, [pc, #332]	@ (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4a52      	ldr	r2, [pc, #328]	@ (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800351a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800351c:	4b50      	ldr	r3, [pc, #320]	@ (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	494d      	ldr	r1, [pc, #308]	@ (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d044      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003542:	4b47      	ldr	r3, [pc, #284]	@ (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d119      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e07f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d003      	beq.n	8003562 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355e:	2b03      	cmp	r3, #3
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003562:	4b3f      	ldr	r3, [pc, #252]	@ (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e06f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003572:	4b3b      	ldr	r3, [pc, #236]	@ (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e067      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003582:	4b37      	ldr	r3, [pc, #220]	@ (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f023 0203 	bic.w	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4934      	ldr	r1, [pc, #208]	@ (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	4313      	orrs	r3, r2
 8003592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003594:	f7fe fe80 	bl	8002298 <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359a:	e00a      	b.n	80035b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359c:	f7fe fe7c 	bl	8002298 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e04f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 020c 	and.w	r2, r3, #12
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d1eb      	bne.n	800359c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035c4:	4b25      	ldr	r3, [pc, #148]	@ (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d20c      	bcs.n	80035ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b22      	ldr	r3, [pc, #136]	@ (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	4b20      	ldr	r3, [pc, #128]	@ (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e032      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f8:	4b19      	ldr	r3, [pc, #100]	@ (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4916      	ldr	r1, [pc, #88]	@ (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003616:	4b12      	ldr	r3, [pc, #72]	@ (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	490e      	ldr	r1, [pc, #56]	@ (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800362a:	f000 f821 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 800362e:	4602      	mov	r2, r0
 8003630:	4b0b      	ldr	r3, [pc, #44]	@ (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	490a      	ldr	r1, [pc, #40]	@ (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	5ccb      	ldrb	r3, [r1, r3]
 800363e:	fa22 f303 	lsr.w	r3, r2, r3
 8003642:	4a09      	ldr	r2, [pc, #36]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003646:	4b09      	ldr	r3, [pc, #36]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe fde0 	bl	8002210 <HAL_InitTick>

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40023c00 	.word	0x40023c00
 8003660:	40023800 	.word	0x40023800
 8003664:	08005524 	.word	0x08005524
 8003668:	2000001c 	.word	0x2000001c
 800366c:	20000020 	.word	0x20000020

08003670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003674:	b094      	sub	sp, #80	@ 0x50
 8003676:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003688:	4b79      	ldr	r3, [pc, #484]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x200>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b08      	cmp	r3, #8
 8003692:	d00d      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003694:	2b08      	cmp	r3, #8
 8003696:	f200 80e1 	bhi.w	800385c <HAL_RCC_GetSysClockFreq+0x1ec>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x34>
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_GetSysClockFreq+0x3a>
 80036a2:	e0db      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036a4:	4b73      	ldr	r3, [pc, #460]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x204>)
 80036a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036a8:	e0db      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036aa:	4b73      	ldr	r3, [pc, #460]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x208>)
 80036ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036ae:	e0d8      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x200>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d063      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	099b      	lsrs	r3, r3, #6
 80036cc:	2200      	movs	r2, #0
 80036ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80036d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80036da:	2300      	movs	r3, #0
 80036dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80036de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80036e2:	4622      	mov	r2, r4
 80036e4:	462b      	mov	r3, r5
 80036e6:	f04f 0000 	mov.w	r0, #0
 80036ea:	f04f 0100 	mov.w	r1, #0
 80036ee:	0159      	lsls	r1, r3, #5
 80036f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036f4:	0150      	lsls	r0, r2, #5
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4621      	mov	r1, r4
 80036fc:	1a51      	subs	r1, r2, r1
 80036fe:	6139      	str	r1, [r7, #16]
 8003700:	4629      	mov	r1, r5
 8003702:	eb63 0301 	sbc.w	r3, r3, r1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003714:	4659      	mov	r1, fp
 8003716:	018b      	lsls	r3, r1, #6
 8003718:	4651      	mov	r1, sl
 800371a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800371e:	4651      	mov	r1, sl
 8003720:	018a      	lsls	r2, r1, #6
 8003722:	4651      	mov	r1, sl
 8003724:	ebb2 0801 	subs.w	r8, r2, r1
 8003728:	4659      	mov	r1, fp
 800372a:	eb63 0901 	sbc.w	r9, r3, r1
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800373a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800373e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003742:	4690      	mov	r8, r2
 8003744:	4699      	mov	r9, r3
 8003746:	4623      	mov	r3, r4
 8003748:	eb18 0303 	adds.w	r3, r8, r3
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	462b      	mov	r3, r5
 8003750:	eb49 0303 	adc.w	r3, r9, r3
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003762:	4629      	mov	r1, r5
 8003764:	024b      	lsls	r3, r1, #9
 8003766:	4621      	mov	r1, r4
 8003768:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800376c:	4621      	mov	r1, r4
 800376e:	024a      	lsls	r2, r1, #9
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003776:	2200      	movs	r2, #0
 8003778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800377a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800377c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003780:	f7fc fd34 	bl	80001ec <__aeabi_uldivmod>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4613      	mov	r3, r2
 800378a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800378c:	e058      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378e:	4b38      	ldr	r3, [pc, #224]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x200>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	099b      	lsrs	r3, r3, #6
 8003794:	2200      	movs	r2, #0
 8003796:	4618      	mov	r0, r3
 8003798:	4611      	mov	r1, r2
 800379a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800379e:	623b      	str	r3, [r7, #32]
 80037a0:	2300      	movs	r3, #0
 80037a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037a8:	4642      	mov	r2, r8
 80037aa:	464b      	mov	r3, r9
 80037ac:	f04f 0000 	mov.w	r0, #0
 80037b0:	f04f 0100 	mov.w	r1, #0
 80037b4:	0159      	lsls	r1, r3, #5
 80037b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ba:	0150      	lsls	r0, r2, #5
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4641      	mov	r1, r8
 80037c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80037c6:	4649      	mov	r1, r9
 80037c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037e0:	ebb2 040a 	subs.w	r4, r2, sl
 80037e4:	eb63 050b 	sbc.w	r5, r3, fp
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	00eb      	lsls	r3, r5, #3
 80037f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037f6:	00e2      	lsls	r2, r4, #3
 80037f8:	4614      	mov	r4, r2
 80037fa:	461d      	mov	r5, r3
 80037fc:	4643      	mov	r3, r8
 80037fe:	18e3      	adds	r3, r4, r3
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	464b      	mov	r3, r9
 8003804:	eb45 0303 	adc.w	r3, r5, r3
 8003808:	607b      	str	r3, [r7, #4]
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003816:	4629      	mov	r1, r5
 8003818:	028b      	lsls	r3, r1, #10
 800381a:	4621      	mov	r1, r4
 800381c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003820:	4621      	mov	r1, r4
 8003822:	028a      	lsls	r2, r1, #10
 8003824:	4610      	mov	r0, r2
 8003826:	4619      	mov	r1, r3
 8003828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800382a:	2200      	movs	r2, #0
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	61fa      	str	r2, [r7, #28]
 8003830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003834:	f7fc fcda 	bl	80001ec <__aeabi_uldivmod>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4613      	mov	r3, r2
 800383e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003840:	4b0b      	ldr	r3, [pc, #44]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x200>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	0c1b      	lsrs	r3, r3, #16
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	3301      	adds	r3, #1
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003850:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003854:	fbb2 f3f3 	udiv	r3, r2, r3
 8003858:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800385a:	e002      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800385c:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x204>)
 800385e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003864:	4618      	mov	r0, r3
 8003866:	3750      	adds	r7, #80	@ 0x50
 8003868:	46bd      	mov	sp, r7
 800386a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800
 8003874:	00f42400 	.word	0x00f42400
 8003878:	007a1200 	.word	0x007a1200

0800387c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10b      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d075      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038b0:	4b91      	ldr	r3, [pc, #580]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038b6:	f7fe fcef 	bl	8002298 <HAL_GetTick>
 80038ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038bc:	e008      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038be:	f7fe fceb 	bl	8002298 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e189      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038d0:	4b8a      	ldr	r3, [pc, #552]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1f0      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d009      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	019a      	lsls	r2, r3, #6
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	071b      	lsls	r3, r3, #28
 80038f4:	4981      	ldr	r1, [pc, #516]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01f      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003908:	4b7c      	ldr	r3, [pc, #496]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800390a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800390e:	0f1b      	lsrs	r3, r3, #28
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	019a      	lsls	r2, r3, #6
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	061b      	lsls	r3, r3, #24
 8003922:	431a      	orrs	r2, r3
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	071b      	lsls	r3, r3, #28
 8003928:	4974      	ldr	r1, [pc, #464]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003930:	4b72      	ldr	r3, [pc, #456]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003932:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003936:	f023 021f 	bic.w	r2, r3, #31
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	3b01      	subs	r3, #1
 8003940:	496e      	ldr	r1, [pc, #440]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00d      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	019a      	lsls	r2, r3, #6
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	061b      	lsls	r3, r3, #24
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	071b      	lsls	r3, r3, #28
 8003968:	4964      	ldr	r1, [pc, #400]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003970:	4b61      	ldr	r3, [pc, #388]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003972:	2201      	movs	r2, #1
 8003974:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003976:	f7fe fc8f 	bl	8002298 <HAL_GetTick>
 800397a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800397c:	e008      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800397e:	f7fe fc8b 	bl	8002298 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e129      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003990:	4b5a      	ldr	r3, [pc, #360]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f0      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d105      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d079      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039b4:	4b52      	ldr	r3, [pc, #328]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039ba:	f7fe fc6d 	bl	8002298 <HAL_GetTick>
 80039be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039c2:	f7fe fc69 	bl	8002298 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e107      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039d4:	4b49      	ldr	r3, [pc, #292]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039e0:	d0ef      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d020      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039ee:	4b43      	ldr	r3, [pc, #268]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f4:	0f1b      	lsrs	r3, r3, #28
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	019a      	lsls	r2, r3, #6
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	061b      	lsls	r3, r3, #24
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	071b      	lsls	r3, r3, #28
 8003a0e:	493b      	ldr	r1, [pc, #236]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a16:	4b39      	ldr	r3, [pc, #228]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a1c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	4934      	ldr	r1, [pc, #208]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01e      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a3c:	4b2f      	ldr	r3, [pc, #188]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a42:	0e1b      	lsrs	r3, r3, #24
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	019a      	lsls	r2, r3, #6
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	061b      	lsls	r3, r3, #24
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	071b      	lsls	r3, r3, #28
 8003a5c:	4927      	ldr	r1, [pc, #156]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a64:	4b25      	ldr	r3, [pc, #148]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	4922      	ldr	r1, [pc, #136]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a7a:	4b21      	ldr	r3, [pc, #132]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a80:	f7fe fc0a 	bl	8002298 <HAL_GetTick>
 8003a84:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a88:	f7fe fc06 	bl	8002298 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e0a4      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a9a:	4b18      	ldr	r3, [pc, #96]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003aa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aa6:	d1ef      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 808b 	beq.w	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	4b10      	ldr	r3, [pc, #64]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	4a0f      	ldr	r2, [pc, #60]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a0b      	ldr	r2, [pc, #44]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003adc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ade:	f7fe fbdb 	bl	8002298 <HAL_GetTick>
 8003ae2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003ae4:	e010      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae6:	f7fe fbd7 	bl	8002298 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d909      	bls.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e075      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003af8:	42470068 	.word	0x42470068
 8003afc:	40023800 	.word	0x40023800
 8003b00:	42470070 	.word	0x42470070
 8003b04:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003b08:	4b38      	ldr	r3, [pc, #224]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0e8      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b14:	4b36      	ldr	r3, [pc, #216]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b1c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d02f      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d028      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b32:	4b2f      	ldr	r3, [pc, #188]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b3a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b42:	4b2c      	ldr	r3, [pc, #176]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b48:	4a29      	ldr	r2, [pc, #164]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b4e:	4b28      	ldr	r3, [pc, #160]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d114      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b5a:	f7fe fb9d 	bl	8002298 <HAL_GetTick>
 8003b5e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f7fe fb99 	bl	8002298 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e035      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b78:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0ee      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b90:	d10d      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003b92:	4b17      	ldr	r3, [pc, #92]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ba6:	4912      	ldr	r1, [pc, #72]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	608b      	str	r3, [r1, #8]
 8003bac:	e005      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003bae:	4b10      	ldr	r3, [pc, #64]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003bb4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003bb8:	6093      	str	r3, [r2, #8]
 8003bba:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003bbc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc6:	490a      	ldr	r1, [pc, #40]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d004      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003bde:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003be0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	42470e40 	.word	0x42470e40
 8003bf8:	424711e0 	.word	0x424711e0

08003bfc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e01c      	b.n	8003c48 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	795b      	ldrb	r3, [r3, #5]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d105      	bne.n	8003c24 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fe f9da 	bl	8001fd8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0204 	orr.w	r2, r2, #4
 8003c38:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	791b      	ldrb	r3, [r3, #4]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_RNG_GenerateRandomNumber+0x1a>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e044      	b.n	8003cf4 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	795b      	ldrb	r3, [r3, #5]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d133      	bne.n	8003ce2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c80:	f7fe fb0a 	bl	8002298 <HAL_GetTick>
 8003c84:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003c86:	e018      	b.n	8003cba <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003c88:	f7fe fb06 	bl	8002298 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d911      	bls.n	8003cba <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d00a      	beq.n	8003cba <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2202      	movs	r2, #2
 8003cae:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e01c      	b.n	8003cf4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d1df      	bne.n	8003c88 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	715a      	strb	r2, [r3, #5]
 8003ce0:	e004      	b.n	8003cec <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	711a      	strb	r2, [r3, #4]

  return status;
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	330c      	adds	r3, #12
 8003d08:	4619      	mov	r1, r3
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff ffa0 	bl	8003c50 <HAL_RNG_GenerateRandomNumber>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d102      	bne.n	8003d1c <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	e000      	b.n	8003d1e <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8003d1c:	2300      	movs	r3, #0
  }
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e07b      	b.n	8003e30 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d108      	bne.n	8003d52 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d48:	d009      	beq.n	8003d5e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	61da      	str	r2, [r3, #28]
 8003d50:	e005      	b.n	8003d5e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d106      	bne.n	8003d7e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7fe f94f 	bl	800201c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2202      	movs	r2, #2
 8003d82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de2:	ea42 0103 	orr.w	r1, r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	0c1b      	lsrs	r3, r3, #16
 8003dfc:	f003 0104 	and.w	r1, r3, #4
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	f003 0210 	and.w	r2, r3, #16
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69da      	ldr	r2, [r3, #28]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e01a      	b.n	8003e80 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e60:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fe f922 	bl	80020ac <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	4613      	mov	r3, r2
 8003e96:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e98:	f7fe f9fe 	bl	8002298 <HAL_GetTick>
 8003e9c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d001      	beq.n	8003eb2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e12a      	b.n	8004108 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <HAL_SPI_Transmit+0x36>
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e122      	b.n	8004108 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_SPI_Transmit+0x48>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e11b      	b.n	8004108 <HAL_SPI_Transmit+0x280>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2203      	movs	r2, #3
 8003edc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	88fa      	ldrh	r2, [r7, #6]
 8003ef0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	88fa      	ldrh	r2, [r7, #6]
 8003ef6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f1e:	d10f      	bne.n	8003f40 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f3e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4a:	2b40      	cmp	r3, #64	@ 0x40
 8003f4c:	d007      	beq.n	8003f5e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f66:	d152      	bne.n	800400e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <HAL_SPI_Transmit+0xee>
 8003f70:	8b7b      	ldrh	r3, [r7, #26]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d145      	bne.n	8004002 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	881a      	ldrh	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f86:	1c9a      	adds	r2, r3, #2
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f9a:	e032      	b.n	8004002 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d112      	bne.n	8003fd0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fae:	881a      	ldrh	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	1c9a      	adds	r2, r3, #2
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003fce:	e018      	b.n	8004002 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fd0:	f7fe f962 	bl	8002298 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d803      	bhi.n	8003fe8 <HAL_SPI_Transmit+0x160>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe6:	d102      	bne.n	8003fee <HAL_SPI_Transmit+0x166>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e082      	b.n	8004108 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1c7      	bne.n	8003f9c <HAL_SPI_Transmit+0x114>
 800400c:	e053      	b.n	80040b6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_SPI_Transmit+0x194>
 8004016:	8b7b      	ldrh	r3, [r7, #26]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d147      	bne.n	80040ac <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	330c      	adds	r3, #12
 8004026:	7812      	ldrb	r2, [r2, #0]
 8004028:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004042:	e033      	b.n	80040ac <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b02      	cmp	r3, #2
 8004050:	d113      	bne.n	800407a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	330c      	adds	r3, #12
 800405c:	7812      	ldrb	r2, [r2, #0]
 800405e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004078:	e018      	b.n	80040ac <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800407a:	f7fe f90d 	bl	8002298 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d803      	bhi.n	8004092 <HAL_SPI_Transmit+0x20a>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d102      	bne.n	8004098 <HAL_SPI_Transmit+0x210>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d109      	bne.n	80040ac <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e02d      	b.n	8004108 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1c6      	bne.n	8004044 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	6839      	ldr	r1, [r7, #0]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f8be 	bl	800423c <SPI_EndRxTxTransaction>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004106:	2300      	movs	r3, #0
  }
}
 8004108:	4618      	mov	r0, r3
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800411e:	b2db      	uxtb	r3, r3
}
 8004120:	4618      	mov	r0, r3
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800413c:	f7fe f8ac 	bl	8002298 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	4413      	add	r3, r2
 800414a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800414c:	f7fe f8a4 	bl	8002298 <HAL_GetTick>
 8004150:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004152:	4b39      	ldr	r3, [pc, #228]	@ (8004238 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	015b      	lsls	r3, r3, #5
 8004158:	0d1b      	lsrs	r3, r3, #20
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	fb02 f303 	mul.w	r3, r2, r3
 8004160:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004162:	e054      	b.n	800420e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d050      	beq.n	800420e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800416c:	f7fe f894 	bl	8002298 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	429a      	cmp	r2, r3
 800417a:	d902      	bls.n	8004182 <SPI_WaitFlagStateUntilTimeout+0x56>
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d13d      	bne.n	80041fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004190:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800419a:	d111      	bne.n	80041c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041a4:	d004      	beq.n	80041b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ae:	d107      	bne.n	80041c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041c8:	d10f      	bne.n	80041ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e017      	b.n	800422e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	3b01      	subs	r3, #1
 800420c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4013      	ands	r3, r2
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	429a      	cmp	r2, r3
 800421c:	bf0c      	ite	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	2300      	movne	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	429a      	cmp	r2, r3
 800422a:	d19b      	bne.n	8004164 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3720      	adds	r7, #32
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	2000001c 	.word	0x2000001c

0800423c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2201      	movs	r2, #1
 8004250:	2102      	movs	r1, #2
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f7ff ff6a 	bl	800412c <SPI_WaitFlagStateUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d007      	beq.n	800426e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004262:	f043 0220 	orr.w	r2, r3, #32
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e032      	b.n	80042d4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800426e:	4b1b      	ldr	r3, [pc, #108]	@ (80042dc <SPI_EndRxTxTransaction+0xa0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1b      	ldr	r2, [pc, #108]	@ (80042e0 <SPI_EndRxTxTransaction+0xa4>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	0d5b      	lsrs	r3, r3, #21
 800427a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800427e:	fb02 f303 	mul.w	r3, r2, r3
 8004282:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800428c:	d112      	bne.n	80042b4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2200      	movs	r2, #0
 8004296:	2180      	movs	r1, #128	@ 0x80
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f7ff ff47 	bl	800412c <SPI_WaitFlagStateUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d016      	beq.n	80042d2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a8:	f043 0220 	orr.w	r2, r3, #32
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e00f      	b.n	80042d4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	3b01      	subs	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ca:	2b80      	cmp	r3, #128	@ 0x80
 80042cc:	d0f2      	beq.n	80042b4 <SPI_EndRxTxTransaction+0x78>
 80042ce:	e000      	b.n	80042d2 <SPI_EndRxTxTransaction+0x96>
        break;
 80042d0:	bf00      	nop
  }

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	2000001c 	.word	0x2000001c
 80042e0:	165e9f81 	.word	0x165e9f81

080042e4 <memset>:
 80042e4:	4402      	add	r2, r0
 80042e6:	4603      	mov	r3, r0
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d100      	bne.n	80042ee <memset+0xa>
 80042ec:	4770      	bx	lr
 80042ee:	f803 1b01 	strb.w	r1, [r3], #1
 80042f2:	e7f9      	b.n	80042e8 <memset+0x4>

080042f4 <__libc_init_array>:
 80042f4:	b570      	push	{r4, r5, r6, lr}
 80042f6:	4d0d      	ldr	r5, [pc, #52]	@ (800432c <__libc_init_array+0x38>)
 80042f8:	4c0d      	ldr	r4, [pc, #52]	@ (8004330 <__libc_init_array+0x3c>)
 80042fa:	1b64      	subs	r4, r4, r5
 80042fc:	10a4      	asrs	r4, r4, #2
 80042fe:	2600      	movs	r6, #0
 8004300:	42a6      	cmp	r6, r4
 8004302:	d109      	bne.n	8004318 <__libc_init_array+0x24>
 8004304:	4d0b      	ldr	r5, [pc, #44]	@ (8004334 <__libc_init_array+0x40>)
 8004306:	4c0c      	ldr	r4, [pc, #48]	@ (8004338 <__libc_init_array+0x44>)
 8004308:	f000 f818 	bl	800433c <_init>
 800430c:	1b64      	subs	r4, r4, r5
 800430e:	10a4      	asrs	r4, r4, #2
 8004310:	2600      	movs	r6, #0
 8004312:	42a6      	cmp	r6, r4
 8004314:	d105      	bne.n	8004322 <__libc_init_array+0x2e>
 8004316:	bd70      	pop	{r4, r5, r6, pc}
 8004318:	f855 3b04 	ldr.w	r3, [r5], #4
 800431c:	4798      	blx	r3
 800431e:	3601      	adds	r6, #1
 8004320:	e7ee      	b.n	8004300 <__libc_init_array+0xc>
 8004322:	f855 3b04 	ldr.w	r3, [r5], #4
 8004326:	4798      	blx	r3
 8004328:	3601      	adds	r6, #1
 800432a:	e7f2      	b.n	8004312 <__libc_init_array+0x1e>
 800432c:	0800553c 	.word	0x0800553c
 8004330:	0800553c 	.word	0x0800553c
 8004334:	0800553c 	.word	0x0800553c
 8004338:	08005540 	.word	0x08005540

0800433c <_init>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	bf00      	nop
 8004340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004342:	bc08      	pop	{r3}
 8004344:	469e      	mov	lr, r3
 8004346:	4770      	bx	lr

08004348 <_fini>:
 8004348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434a:	bf00      	nop
 800434c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434e:	bc08      	pop	{r3}
 8004350:	469e      	mov	lr, r3
 8004352:	4770      	bx	lr
